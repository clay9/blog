<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>prog debug on 飘</title><link>https://www.wcq.life/docs/prog_debug/</link><description>Recent content in prog debug on 飘</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 05 Mar 2024 06:40:22 +0000</lastBuildDate><atom:link href="https://www.wcq.life/docs/prog_debug/index.xml" rel="self" type="application/rss+xml"/><item><title>gdb</title><link>https://www.wcq.life/docs/prog_debug/gdb/</link><pubDate>Thu, 18 Jan 2024 19:05:00 +0000</pubDate><guid>https://www.wcq.life/docs/prog_debug/gdb/</guid><description> 附加命令 # attach thread_id 附加到进程 gdb ./a.out 使用gdb启动程序 调试命令 # bt (backtrace) 查看函数栈 bt full 查看更加详细的信息 f (frame) 查看栈信息 f 0 表示查看栈顶; f n查看第n+1层 down 查看下一栈 up 查看上一栈 i (info) i f 查看当前栈所在层的具体信息 i args 当前函数的参数名及其值 i locals 当前函数中所有局部变量及其值 i catch 异常处理信息 i b 查看断点 i proc mappings 查看程序的内存分布 i reg 查看寄存器 l (list) 查看源码 p (print) 查看变量的值 调试方法 # 以调试core文件为例 gdb ./a.out core bt 先查看堆栈 如果2没有有用信息, bt full 查看更加详细的堆栈 有时候遇到一些奇怪问题, 可以尝试make clean 整个工程, 再重新生成</description></item><item><title>valgrind</title><link>https://www.wcq.life/docs/prog_debug/valgrind/</link><pubDate>Thu, 18 Jan 2024 19:05:00 +0000</pubDate><guid>https://www.wcq.life/docs/prog_debug/valgrind/</guid><description>&lt;p>程序检测工具 &lt;br/>&lt;/p></description></item></channel></rss>