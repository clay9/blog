<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>prog language on 飘</title><link>https://clay9.github.io/blog/docs/prog_language/</link><description>Recent content in prog language on 飘</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 02 May 2025 14:04:35 +0000</lastBuildDate><atom:link href="https://clay9.github.io/blog/docs/prog_language/index.xml" rel="self" type="application/rss+xml"/><item><title>elisp</title><link>https://clay9.github.io/blog/docs/prog_language/elisp/</link><pubDate>Thu, 18 Jan 2024 18:34:00 +0000</pubDate><guid>https://clay9.github.io/blog/docs/prog_language/elisp/</guid><description>&lt;p>参考文档 &lt;br/>&lt;/p>
&lt;ol>
&lt;li>&lt;a href="http://smacs.github.io/elisp/02-elisp-basic.html">水木社区Emacs版&lt;/a> &lt;br/>&lt;/li>
&lt;li>&lt;a href="https://www.csdn.net/article/2012-11-22/2812113-The-Nature-Of-Lisp">lisp的本质&lt;/a> &lt;br/>&lt;/li>
&lt;/ol>
&lt;h2 id="基础语法">
 基础语法
 &lt;a class="anchor" href="#%e5%9f%ba%e7%a1%80%e8%af%ad%e6%b3%95">#&lt;/a>
&lt;/h2>
&lt;h3 id="函数重载">
 函数重载
 &lt;a class="anchor" href="#%e5%87%bd%e6%95%b0%e9%87%8d%e8%bd%bd">#&lt;/a>
&lt;/h3>
&lt;p>elisp没有重载的概念, 直接覆盖原定义即可. 相关函数: &lt;br/>&lt;/p>
&lt;ol>
&lt;li>advice-add &lt;br/>
根据key来决定old_fun 与 new_fun的关系 &lt;br/>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>key&lt;/th>
 &lt;th>desc&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>filter-return&lt;/td>
 &lt;td>先执行old. new对old的结果再处理&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>before&lt;/td>
 &lt;td>先执行new, 过滤一下数据, 再把结果给old&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>arround&lt;/td>
 &lt;td>先执行new, 并在new中主动调用old(也可以不调用)&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>使用defune 覆盖原函数定义 &lt;br/>
如果只是重载, 应该使用这种方法. advice-add的本意不是用来override &lt;br/>&lt;/li>
&lt;/ol>
&lt;h2 id="elisp-and-and-shell">
 elisp &amp;amp;&amp;amp; shell
 &lt;a class="anchor" href="#elisp-and-and-shell">#&lt;/a>
&lt;/h2>
&lt;h3 id="bash调用elisp">
 bash调用elisp
 &lt;a class="anchor" href="#bash%e8%b0%83%e7%94%a8elisp">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>elisp代码写入el文件(eshell script) &lt;br/>&lt;/li>
&lt;li>bash调用emacs执行el文件 &lt;br/>
&lt;pre>&lt;code class="language-text"># 实际还是emacs 执行的elisp代码
emacs -u clay --script /Users/clay/.emacs.d/lisp/fun/init-hexo-fun.el
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ol>
&lt;h3 id="elisp-调用bashe">
 elisp 调用bashe
 &lt;a class="anchor" href="#elisp-%e8%b0%83%e7%94%a8bashe">#&lt;/a>
&lt;/h3>
&lt;pre>&lt;code class="language-text">(setq my-command
(concat &amp;quot;IFS=: read -ra dirs &amp;lt;&amp;lt;&amp;lt;\&amp;quot;$PATH\&amp;quot;\n&amp;quot;
 &amp;quot;for dir in ${dirs[@]}; do\n&amp;quot;
 &amp;quot; echo got dir \&amp;quot;$dir\&amp;quot;\n&amp;quot;
 &amp;quot;done\n&amp;quot;))
(shell-command (format &amp;quot;bash -c %s&amp;quot; (shell-quote-argument my-command)))
&lt;/code>&lt;/pre></description></item><item><title>shell</title><link>https://clay9.github.io/blog/docs/prog_language/shell/</link><pubDate>Thu, 18 Jan 2024 19:09:00 +0000</pubDate><guid>https://clay9.github.io/blog/docs/prog_language/shell/</guid><description>&lt;p>shell 记录 &lt;br/>&lt;/p></description></item></channel></rss>