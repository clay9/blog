<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>socket on 飘</title><link>https://clay9.github.io/blog/docs/os/socket/</link><description>Recent content in socket on 飘</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 02 Oct 2025 11:00:16 +0000</lastBuildDate><atom:link href="https://clay9.github.io/blog/docs/os/socket/index.xml" rel="self" type="application/rss+xml"/><item><title>socket base</title><link>https://clay9.github.io/blog/docs/os/socket/socket/</link><pubDate>Thu, 18 Jan 2024 19:13:00 +0000</pubDate><guid>https://clay9.github.io/blog/docs/os/socket/socket/</guid><description>&lt;p&gt;socket相关网络编程 &lt;br/&gt;&lt;/p&gt;</description></item><item><title>asio</title><link>https://clay9.github.io/blog/docs/os/socket/asio/</link><pubDate>Thu, 18 Jan 2024 19:14:00 +0000</pubDate><guid>https://clay9.github.io/blog/docs/os/socket/asio/</guid><description>&lt;h2 id="参考文档"&gt;参考文档&lt;a class="anchor" href="#%e5%8f%82%e8%80%83%e6%96%87%e6%a1%a3"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://mmoaay.gitbooks.io/boost-asio-cpp-network-programming-chinese/content/"&gt;https://mmoaay.gitbooks.io/boost-asio-cpp-network-programming-chinese/content/&lt;/a&gt; &lt;br/&gt;
&lt;a href="http://blog.jqian.net/post/boost-asio.html"&gt;http://blog.jqian.net/post/boost-asio.html&lt;/a&gt; &lt;br/&gt;
&lt;a href="https://www.limerence2017.com/2023/06/07/asio20/"&gt;https://www.limerence2017.com/2023/06/07/asio20/&lt;/a&gt; &lt;br/&gt;&lt;/p&gt;
&lt;h2 id="阻塞-vs-非阻塞"&gt;阻塞 vs 非阻塞&lt;a class="anchor" href="#%e9%98%bb%e5%a1%9e-vs-%e9%9d%9e%e9%98%bb%e5%a1%9e"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;blocking vs non-blocking. &lt;br/&gt;
描述的是 调用线程是否等待结果 &lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阻塞 &lt;br/&gt;
发起调用后, 如果结果没准备好, 线程会一直开在那里, 直到得到结果. &lt;br/&gt;
线程在等待, 不能干别的事情. 例如read() 文件 &lt;br/&gt;&lt;/li&gt;
&lt;li&gt;非阻塞 &lt;br/&gt;
发起调用后, 如果结果没准备好, 函数立即返回一个状态值, 线程可以继续干别的. &lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="同步-vs-异步"&gt;同步 vs 异步&lt;a class="anchor" href="#%e5%90%8c%e6%ad%a5-vs-%e5%bc%82%e6%ad%a5"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;synchronous vs asynchronous &lt;br/&gt;
描述的是 调用结果的获取方式 &lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步 &lt;br/&gt;
调用方主动等待或轮询, 自己负责把结果取回来. &lt;br/&gt;
就算底层操作是非阻塞的, 你也可能要不停的问&amp;quot;好了没&amp;quot;. &lt;br/&gt;&lt;/li&gt;
&lt;li&gt;异步 &lt;br/&gt;
调用方发起请求后, 不需要主动等待, 结果准备好时, 会通过回调, 事件通知你. &lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="一个类比-打饭窗口"&gt;一个类比（打饭窗口 🍚）&lt;a class="anchor" href="#%e4%b8%80%e4%b8%aa%e7%b1%bb%e6%af%94-%e6%89%93%e9%a5%ad%e7%aa%97%e5%8f%a3"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;阻塞同步：排队打饭，直到打好才走。 &lt;br/&gt;
非阻塞同步：你不排队，隔一会儿自己跑来看看饭打好了没。 &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;阻塞异步：你让食堂阿姨做好给你打电话，但你一直死守着电话，啥也不干。 &lt;br/&gt;
非阻塞异步：你让食堂阿姨做好给你打电话，你该干啥干啥，饭好了电话通知你。 &lt;br/&gt;&lt;/p&gt;</description></item></channel></rss>