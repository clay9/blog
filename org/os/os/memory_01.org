#+title: memory 01
#+date: 2024-05-30 17:36:24
#+hugo_section: docs
#+hugo_bundle: os/os/memory_01
#+export_file_name: index
#+hugo_weight: 10
#+hugo_draft: false
#+hugo_auto_set_lastmod: t
#+hugo_custom_front_matter: :bookCollapseSection false

os中内存段页发展

#+hugo: more
* 参考文章
  [[https://zhuanlan.zhihu.com/p/324210723][强烈推荐: x86段寄存器和分段机制]]

* cpu发展历史
  #+begin_columns
  x86(8086)之前
  处理器4bits
  /TODO 也许补充一下/
  @@hugo:<--->@@x86
  处理器变为16bits, 地址总线变为20根
  为了能访问到所有的地址空间, 引入了 =段寄存器= (CS,DS,SS,ES)
  @@hugo:<--->@@32bits
  处理器变为32bits, 地址总线变为32根
  为了能访问到所有的地址空间, 同时又要兼容x86, 同时os越来越普遍
  引入了 =段描述表寄存器= (GDTR, LDTR)
  @@hugo:<--->@@64bits
  处理器变为64bits, 地址总线在40-48根
  #+end_columns
* 段寄存器
  根据发展史, 知道段寄存器的引入是为了解决 /cpu bits < 地址总线/ 的问题
  [[file:segment_reigster.png]]

  x86把物理内存分割成一段段的, 段寄存器记录段的高16bits, 剩下的4bits放在IP寄存器.
  因此, 进程要访问的线性地址 = (段reigster << 4) + IP偏移
* 段描述表寄存器
  32bits cpu时候, os越来越普遍(cpu 16bits时, os还不普及).

  32bits cpu为了能完整的使用32地址总线, 同时也要满足os的各种需求(比如用户态, 内存态权限等),
  需要对段进行详细的控制, 不仅仅是知道段基址.
  在这种情形下, DTR (describe table register)被引入了.

  进程在段register拿到index, 在DTR中找到index所在的内存地址(DTR只是表, describe info放在内存中).
  去该内存地址中获取describe info. 这其中就包含了段基址
  因此, 此时进程访问的线性地址 = [段基址] + IP偏移(这里IP寄存器出了32bits版 /EIP/)

  此时根据硬件(EIP)发展进度, os对 /段基址/ 使用不同的处理模式
  有EIP的一般都会直接把 /段基址/ 置为0. 因为不需要再对物理内存切段, 也可以完全访问了.

  当出现64bit cpu时, /段基址/ 基本都被设置为了0.
* 线性地址 -> 物理地址
  在32bits cpu之前, 线性地址即是物理地址
  32bits cpu出现后(或是os出现后?), 需要翻译线性地址与物理地址.
  这个翻译动作是硬件MMU做的
** 为什么需要
   #+attr_shortcode: warning
   #+begin_hint
   未考证, 不一定对
   #+end_hint
   os中引入了进程, 不同进程的逻辑地址可能相同, 所以其线性地址也可能相同.
   这将导致不同的进程访问了同一个物理内存地址.
   而逻辑地址到线性地址是根据GDTR (global)获得的, 全局相同.
   所以在线性地址到物理地址上做功夫

   所以需要一个与进程关联的DTR(实际就是LDTR)来处理这个翻译动作.
   LDTR就是进程的段表.
   线性地址(?待验证)在LDTR中找到describe info.
   根据describe info 再找到物理内存即可.

   但是这么处理, 对物理内存的利用率不高.
   为了更好的利用物理内存, 使用分页.
** 分页
   分页就是把物理内存切割成一页一页的, 即方便管理, 也方便使用.

   为了与物理内存的一页页内存对应, 进程中每个段也是一页页的使用内存.
   所以LDTR中应该保存 =进程段页= 与 =物理页= 之间的映射关系(即页表)

   所以进程中线性地址到物理地址, 除了查段表, 也要看页表
   根据段表, 在内存中找到页表, 根据页表, 找到真实的物理页.
   这个动作是由MMU做的
*** 多级页表
    为了减少内存, 引入了多级页表.
    缺点是导致内存查询次数增多. 每引入一层, 就需要额外查询一次内存
*** 快表 TLB
    为了减少内存的查询次数, 引入的缓存表.
    快表保存在寄存器中, 所以如果快表命中, 访问速度要比多级页表快很多
