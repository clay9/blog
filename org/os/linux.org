#+title: linux
#+date: 2024-05-31 10:36:48
#+hugo_section: docs
#+hugo_bundle: os/linux
#+export_file_name: index
#+hugo_weight: 1
#+hugo_draft: false
#+hugo_auto_set_lastmod: t
#+hugo_custom_front_matter: :bookCollapseSection false

linux常用命令&&工具

#+hugo: more
* 查看硬件信息

  | 信息 | 命令              |
  |------+-------------------|
  | cpu  | cat /proc/cpuinfo |
  |------+-------------------|

  #+attr_shortcode: cpuinfo "..."  
  #+begin_expand
  总核数 = 物理CPU个数 X 每颗物理CPU的核数
  总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数

  查看物理CPU个数
  cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l

  查看每个物理CPU中core的个数(即核数)
  cat /proc/cpuinfo| grep "cpu cores"| uniq

  查看逻辑CPU的个数
  cat /proc/cpuinfo| grep "processor"| wc -l
 
  查看CPU信息（型号）
  cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c
  #+end_expand

* 查看os信息

  | 信息               | 命令                       |
  |--------------------+----------------------------|
  | linux发行版信息    | cat /etc/issue             |
  |--------------------+----------------------------|
  | kernel信息         | cat /proc/version, uname-a |
  |--------------------+----------------------------|
  | debian系已安装的包 | apt list --installed       |
  |--------------------+----------------------------|
  | process            | top                        |
  |--------------------+----------------------------|
  | memory             | free                       |
  |--------------------+----------------------------|
  | fd                 | 见下面                     |
  |--------------------+----------------------------|
  | socket             | [[ss][ss]]  [[ss_args][ss参数]] netstat         |
  |--------------------+----------------------------|
  | 查看库的封装信息   | readelf, nm, objdump       |
  |--------------------+----------------------------|

  #+attr_shortcode: top "..."
  #+begin_expand
  | key      | desc                                            |
  |----------+-------------------------------------------------|
  | top      | 当前系统时间;                                   |
  |          | 启动了3小时45分钟;                              |
  |          | user同时在线的用户;                             |
  |          | load average服务器1min, 5min, 15min的负载情况   |
  |----------+-------------------------------------------------|
  | Tasks    | 总共开启了27个进程                              |
  |          | 1个在run, 26个sleep, 0stoped, 0僵尸进程         |
  |----------+-------------------------------------------------|
  | %Cpu     | 总核数的平均值(不会大于100%)                    |
  |          | us用户占比, sy系统占比                          |
  |          | ni用户进程空间内改变过优先级的进程占用CPU百分比 |
  |          | id空闲cpu百分比                                 |
  |          | wa用户进程空间内改变过优先级的进程占用CPU百分比 |
  |          | hi硬件中断, si软件中断, st实时                  |
  |----------+-------------------------------------------------|
  | MiB Mem  | total系统物理总内存,                            |
  |          | free空闲内存, used已使用, buff/cache缓冲区内存  |
  |----------+-------------------------------------------------|
  | MiB Swap | total交换总内存                                 |
  |          | free交换空闲, used交换已用, avail 可用内存      |
  |----------+-------------------------------------------------|
  top - 12:19:58 up  3:45,  1 user,  load average: 0.00, 0.02, 0.05
  Tasks:  27 total,   1 running,  26 sleeping,   0 stopped,   0 zombie
  %Cpu(s):  1.5 us,  1.1 sy,  0.0 ni, 97.2 id,  0.0 wa,  0.0 hi,  0.2 si,  0.0 st
  MiB Mem :  64348.3 total,  39305.2 free,  11285.5 used,  13757.6 buff/cache
  MiB Swap:   8192.0 total,   8192.0 free,      0.0 used.  52690.6 avail Mem 

  #+attr_shortcode: info
  #+begin_hint
  load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。
  如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了
  #+end_hint

  #+attr_shortcode: info
  #+begin_hint
  这一系列信息是系统的信息, docker容器内外是一致的
  #+end_hint

  | key     | desc                                      |
  |---------+-------------------------------------------|
  | pid     |                                           |
  | user    | 谁启动的该进程                            |
  | PR      | 优先级                                    |
  | ni      | nice值 负值表示高优先级，正值表示低优先级 |
  | VIRT    | 虚拟内存                                  |
  | RES     | 真实内存                                  |
  | SHR     | 共享内存                                  |
  | %CPU    | 单核cpu占比, 大于100%表示占用了多个cpu核  |
  | TIME+   | 进程运行总时间??占用cpu的总时间??         |
  | COMMAND | 进程启动时的命令                          |
  |---------+-------------------------------------------|
  PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND

  122 root      20   0   12936   7148   6648 S   1.0   0.0   2:32.20 cli                                                                            
  69  root      20   0   12928   7064   6572 S   0.7   0.0   2:07.64 svr                                                                            



  =快捷键=
  + 排序
    < :: 左移sort-field; 进入top时候默认sort-field是%cpu
    > :: 右移sort-field
    R :: 反转排序
  + 高亮
    b :: 是否高亮显示 <R进程 或者 sort-field>, 总开关
    x :: 是否高亮 sort-field
    y :: 是否高亮 R进程
  + 其他
    1 :: 显示所有逻辑cpu
    k :: 关闭特定pid进程
    s :: 设置刷新时间
  + 内存
    m :: 切换mem显示, 显示使用百分比&&总内存 ::>  (*used/total)% / total
    t :: 切换cpu显示, 没看明白; 仍然推荐看%Cpu->id 或者1查看所有核心的
  
  #+end_expand
  
  #+attr_shortcode: fd "..."
  #+begin_expand
  =查询=
  + 所有进程允许打开的最大fd数量 :: /proc/sys/fs/file-max
  + 所有进程已经打开的fd数量及允许的最大数量 :: /proc/sys/fs/file-nr
  + 单个进程允许打开的最大fd数量 :: ulimit -n
  + 单个进程(例如pid为5454)已打开的fd :: ls -l /proc/5454/fd/


  =设置=
  * 用户单进程最大; 仅当前sesstion生效
  * ulimit -n 实际是 ulimit -Sn (Soft软件)
  *          H硬件是 ulimit -Hn
  ulimit -n xx 

  * 用户单进程S(软件)最大 -- 需要重新登录生效
  echo '* soft nofile 1048576' >> /etc/security/limits.conf
  * 用户单进程H(硬件)最大 -- 需要重新登录生效
  * 该值一定不能大于fs.nr_open, 否则注销后将无法正常登录!!!
  echo '* hard nofile 1048576' >> /etc/security/limits.conf 
       
  * 重点!!! 以上3个的配置数都受限于fs.nr_open -- 调用sysctl -p生效
  sysctl -w fs.nr_open=xxx

  #+end_expand

  #+attr_shortcode: free "..."   
  #+begin_expand
  * free -h


  | key   | desc       |
  |-------+------------|
  | total | 系统总内存 |
  # total        系统总内存
  # used         已经使用的内存
  # free         空闲的内存 -- 不等于可用内存
  # shared       已经舍弃的内存???
  # buff/cache   io读写内存;内存紧张的时候,会自动释放; cache文件系统缓存; buff 裸设备相关缓存
  # available    可用内存. = free + buff/cache
  total        used        free      shared  buff/cache   available
  Mem:           62Gi        11Gi        38Gi        17Mi        13Gi        51Gi
  Swap:         8.0Gi          0B       8.0Gi
  #+end_expand

  <<ss>>
  #+attr_shortcode: ss输出说明 "..."
  #+begin_expand
  # every 100s 每100s刷新一次 ss-s  851d60ae4404是服务器名字  服务器当前时间
  # total:           这个数值是docker容器有关的, 每个单独计算;   貌似是inet + 1 TODONOW.
  # TCP: 2101        这个数值是docker容器无关的, 容器内外都一样; 貌似是state总和?? TODONOW
  #      estab    -- 这个数值是docker容器相关的, 每个单独计算
  #      closed   -- 这个数值是docker容器相关的, 每个单独计算
  #      orphaned --
  #      timewait --   
  Every 100.0s: ss -s      851d60ae4404: Wed Oct 20 17:44:33 2021

  Total: 3
  TCP:   2101 (estab 0, closed 2100, orphaned 0, timewait 0)

  # RAW
  # UDP
  # TCP   这里的total是docker容器相关的, 每个单独计算
  # INET
  # FRAG
  Transport Total     IP        IPv6
  RAW       0         0         0
  UDP       1         1         0
  TCP       1         1         0
  INET      2         2         0
  FRAG      0         0         0
  #+end_expand

  <<ss_args>>
  #+attr_shortcode: ss常用参数 "..."
  #+begin_expand
  # ss默认只显示state = established状态的, 可以通过-a或state参数来控制显示
  ss -a  #显示所有状态的

   
  # -4 ipv4
  # -6 ipv6
  # -t tcp协议
  # -u udp协议 等等
  ss -t  # 匹配tcp连接


  # dst   -- 远端
  # src   -- 本地   
  ss dst 192.168.1.5        # 匹配远程地址
  ss dst 192.168.1.5:443    # 匹配远程地址和端口


  # dport --
  # sport --
  # 可以通过比较参数来选择某个区间的端口号
  # le, ge, eq, ne, gt, lt -- 与sh的语法一致
  ss sport lt 50            # 匹配小于50的端口号


  # state 通过tcp连接状态进行过滤
  # 常用状态
  # established, SYN-SENT, syn-recv, fin-wait-1, fin-wait-2, time-wait, closed, close-wait, listen, closing
  ss state listening        # 匹配listen状态
  #+end_expand
     

* 常用命令

  | 命令    | 信息                                        |
  |---------+---------------------------------------------|
  | =\=       | 管道. 将 =前面的标准输出= 作为 =后面的标准输入= |
  |---------+---------------------------------------------|
  | xargs   | 将 =前面的标准输出= 作为 =后面命令的参数=       |
  |---------+---------------------------------------------|
  | watch   | 周期性执行某个命令                          |
  |---------+---------------------------------------------|
  | crontab | 定时任务                                    |
  |---------+---------------------------------------------|
  | sort    | 排序                                        |
  |---------+---------------------------------------------|
  | wc      | 统计行数                                    |
  |---------+---------------------------------------------|

  <<sort>>
  #+attr_shortcode: sort "..."
  #+begin_expand
  根据Ascii进行排序, 默认为升序
  - u 去除重复行
  - r 降序
  - n 根据 =数值= 而非 =Ascii= 排序
  - k, t  k指定列数, t指定分隔符
  - f 会将小写字母都转换为大写字母来进行比较，亦即忽略大小写
  #+end_expand

* 常用软件
** tmux && screen
   #+attr_shortcode: info
   #+begin_hint
   很少远程工作了, 不再使用
   #+end_hint
   为什么使用tmux 和 screen :: 远程登录操作时候, 因网络不稳定, 总是掉线, 丢失环境
   讲解它们之前必须要先了解nohup 与 &
*** nohup 与 &
    nohup与 &都是后台运行
    nohup会占用标准输出, &则不会占用标准输出
    它们的作用都是为了防止session关闭后, 程序无法运行

    但每个程序都要加上nohup前缀或&后缀, 则会特别麻烦, 因此出现了screen与tmux

*** screen
    screen属于GNU计划

    #+attr_shortcode: 基本命令 "..."
    #+begin_expand
    - screen, screen -S <name>
      创建screen
    - screen -d
      detach screen  只有deatch之后 其他人才能attach
    - screen -r
      reatach screen 链接screen
    - screen -ls, screen -list
      列出所有的screen
    #+end_expand

    #+attr_shortcode: 快捷键 "..."
    #+begin_expand
    screen的一个弊端就是将太多功能放在了快捷键上 而不是放在CMD上

    - C-a
      为screen指令的前缀
    - C-a k
      kill
    - C-a w
      列出所有的screen窗口  -- 亲测无效???
    - C-a p, C-a n
      切换到上一个或下一个窗口 -- 亲测无效??
    - C-a z
      类似于emacs的C-z 将程序放入后台 可以通过jobs 和fg操作
    #+end_expand

    #+attr_shortcode: info
    #+begin_hint
    通过C-a z可以了解screen的工作原理 :: screen就是新开了一个shell, 在里面有不同的窗口windows.
    然后可以在windows间切换, 或者是回到原先的shell中
    #+end_hint

    #+attr_shortcode: info
    #+begin_hint
    为什么不喜欢screen
    虽然查看教程, 发现screen还有很多高级功能, 然而screen的窗口功能太不友好, 导致我经常不知道自己工作
    在哪个窗口下, 而且因为C-a w的无效, 很难有一览全局, 所以最后选择放弃screen, 改投tmux
    #+end_hint

*** tmux
    #+begin_example
      server
      \_ session1
      \_ session2
         \_ socket1    默认socket
      \_ session3
         \_ socket2    通过-L,-S生成的新socket              
    #+end_example
    一个server 多个session, session又属于socket

    #+attr_shortcode: 基本命令 "..."
    #+begin_expand
    - tmux
    - tmux ls
      列出所有的tmux session, 注意没有 =-=  =--=
    - tmux attach
      attch到上次的tmux session
    - tmux attach -t session
      attch到指定的tmux session
    - tmux kill-session -t
      关闭session
    - tmux kill-server -t
      关闭server      
    #+end_expand

    #+attr_shortcode: info
    #+begin_hint
    关闭server 将导致tmux关闭, tmux中的程序也会关闭
    如果session退出之前, tmux是挂起状态stopped,那么下次session重新链接后, 将导致tmux关闭
    tmux new -s $sessionName 创建一个新的session, 并指定其名称, 不然就是递增数字
    #+end_hint

    #+attr_shortcode: 快捷键 "..."
    #+begin_expand
    tmux以C-b作为快捷键的前缀

    - C-b ?
      列出所有的命令
    - C-b 数字 | n | p
      切换窗口
    - C-b C-z
      挂起程序
    - C-b d
      deatach类似于screen中的deatch
      deatch之后就可以回到正常的shell, 并使tmux运行在后台
    #+end_expand

    #+attr_shortcode: info
    #+begin_hint
    tmux有友好的界面, 友好的C-b ?帮助提示, 简单的操作
    #+end_hint
