#+title: org && gtd
#+date: 2024-05-30 20:51:20
#+hugo_section: docs
#+hugo_bundle: emacs/org/org_gtd
#+export_file_name: index
#+hugo_weight: 3
#+hugo_draft: false
#+hugo_auto_set_lastmod: t
#+hugo_custom_front_matter: :bookCollapseSection false

* 需求分析
  =所有的设计都是基于需求的=, 应该先有需求, 再去设计.
  当前的需求:
  1. 有哪些task
     - [X] 他们归属于哪个PROJECT
     - [X] 他们的四象限: 紧急&&重要
     - [X] 工作量预估
     - [ ] 关联性 A task可能与B, C相关联
       /TODO 该任务并未完成/
  2. 当前正在处理的任务
     尽可能的关注当前, 忽略其他
  3. 当某个task进行时, 快速capture我的想法, 并且自动refile
  4. 看到自己花费的时间
     - [X] 一天,一周都做了什么
     - [X] 某个PROJECT总共花费的时间

* 思路的设计
  5楼到地面视角:
  
  | 楼数 | 功能     | 说明    | 备注    |
  |------+----------+---------+---------|
  | 5楼  | 人生规划 |         |         |
  | 4楼  | 3年目标  |         |         |
  | 3楼  | 1年目标  |         |         |
  | 2楼  | 职责范围 |         |         |
  | 1楼  | 项目     |         | GTD管理 |
  | 地面 | 行动清单 | 隶属1楼 | GTD管理 |
  |------+----------+---------+---------|
  /GTD管理的其实是 1楼 && 地面的清单/

* 流程的设计
  #+BEGIN_EXAMPLE artist-mode
    -------------------------+------------------------
                             |
                             | capture (easy)
                             |
                             |
                             v
         archive        +---------+
    +-------------------|  inbox  |
    |                   +----+----+
    |                        |
    |                        | refile (auto)
    |                        |
    |                        |
    |       |----------------+--------------------|
    |       |                |                    |
    |       |                v                    v
    |       v           +---------+          +---------+
    |  +---------+      | my/emacs|          | work/qy |
    |  |  task   |      |  * emacs|          |  * ker  |
    |  +----+----+      |  * org  |          |  * frame|
    |       |           |  * ccIDE|          |  * sub  |
    |       |           +---------+          +---------+
    |       |
    |       | archive (auto)
    |       |
    |       v
    |  +---------+
    +->| archive |
       +----+----+
  #+END_EXAMPLE
* 文件的设计
  区分目录是为了更好的给PROJECT做分类处理, 使后续的统计查看更方便. 比如org-agenda `R统计时间

  gtd_common中保存的是一些通用的, 可能暂时不好归类的PROJECT以及一系列TODO任务.

  而gtd_emacs与gtd_qygame则是已经明确分类的PROJECT.
  比如gtd_emacs/emacs.org明确的是与emacs有关的任务.
  但即使都是emacs相关, 也可分为是emacs自身, org, 还是IDE.
  所以emacs.org中实际包含了上面三个PROJECT: emacs, org, IDE

  #+CAPTION: gtd目录
  | 目录       | 说明                 | 备注        |
  |------------+----------------------+-------------|
  | gtd_common | 通用gtd流程文件      | inbox.org   |
  |            |                      | task.org    |
  |            |                      | archive.org |
  |------------+----------------------+-------------|
  | gtd_emacs  | emacs project files  |             |
  |------------+----------------------+-------------|
  | gtd_qygame | qygame project files |             |
  |------------+----------------------+-------------|

  #+CAPTION: gtd_common中的文件
  | 文件名      | 说明     | 备注                       |
  |-------------+----------+----------------------------|
  | inbox.org   | 收集箱   | 不区分时间, 不区分场景     |
  |             |          | 灵光一闪即可扔进去保存     |
  |-------------+----------+----------------------------|
  | task.org    | 任务清单 | 1. priority标签            |
  |             | task     | 2. 四象限约束              |
  |-------------+----------+----------------------------|
  |             | 项目清单 | 1. 凡是steps>1的都属于项目 |
  |             | project  |                            |
  |-------------+----------+----------------------------|
  | archive.org | 参考资料 | 1. 有参考价值的东西        |
  |             |          | 2. 垃圾箱                  |
  |-------------+----------+----------------------------|

  #+begin_quote
  1. task 与 project的唯一区别
     task只有one step,  project的steps > 1
  2. 文件都是通过流程来操作的, 不应该手动去干预
  3. 没增加一个工程, 应该增加一个对应的gtd_xx目录
  #+end_quote
  
* TODO的设计
  - TODO 等待自己处理
  - WAITTING 等待他人完成
  - PROJECT 项目
  - DONE 完成
  - CANCEL 取消

* TAGS的设计
  四象限使用proirity来区分;
  TAGS为之后快速查找使用

* PROPERTY的设计
  暂未使用
* Effort的设计
  effort是自己对某个task工作量的预估.
  与task完成时的clock-sum-time比对, 可以更好的进行分析.
  
  为了方便的effort, 这里只在两处设计了提示:
  1. capture的时候, 可以输入effort. 当然为了快速capture, 这里允许输入0跳过
  2. clock-in的时候, 如果item effort还是0, 则会要求进入工作预估
     
* clock的设计
  org的clock已经非常好用了. 这里只是做了一点点修改:
  1. 快捷键快速clock-in, clock-out
  2. 如果当前处在clock, 会显示在frame的title中

* capture设计
  经常是在工作的时候, 突然有了某个想法. 这个想法也许值得记录, 但不要打断当前的思路.
  所以capture应该是快速的, 但又要明确的(归属要明确)

  为了快速capture, 所以不应该考虑这个想法应该放到哪个file. 统一放到inbox即可.
  为了后面的auto refile, 这个想法或item 应该携带足够的信息, 可以完成auto refile.
  这里的办法是给item一个tag.
  比如 capture了一个item, 再给其增加对应的tag
  #+begin_example
  * org应该快速capture :org:
  #+end_example
  这样就表明了这是一个与org PROJECT有关的task
* refile的设计
  refile应该是自动完成的, 不应该手动
  为了自动完成, item已经给了相关信息(tag)
  在gtd_my或gtd_work的PROJECT中, 也应该携带足够的信息去与该tag匹配. 只有匹配成功了, 就可以auto-refile
  这里的办法是匹配PROJECT ITEM的heading, 比如:
  #+BEGIN_EXAMPLE org
  * PROJECT org
  #+END_EXAMPLE
  当capute-item的tag 与 PROJECT-item的heading(org)相匹配的时候, 会自动refile
* archive的设计
  archive的目的:
  - 在org file中隐藏已 =DONE= 的task
  - 后期统计
  - 归档

    
  现在方案:
  对于gtd_my, gtd_work中的task, archive到PROEJCT/archive下面
  对于gtd_common中的task, archive到archive.org

* Agent的设计
  agent的目的有2个:
  1. 查看各种代办事项
     今天的, 未来的, TODO的, inbox中的
  2. 统计信息
     一是以time为视角的统计, 比如今天或这周做了哪些TODO或PROJECT
     二是以PROJECT为视角的统计. 比如统计emacs PROJECT花费的时间

    
  查看代办事项, 主要是org-agenda-view, org-next-view, org-inbox-view 查看
  查看统计信息, 主要是org-project-view, org-archive-view 以及在特定PROJECT file中的org-colmun-view查看具体

  org-next-view 显示todo|waiting items && tuck project
    
  org-project-view中没必要包含gtd_common中的item
  org-archive-view中包含gtd_common中的TODO, PROJECT items    

* 使用流程
  #+BEGIN_EXAMPLE
    |
    | capture with                                         add timestamp &&              
    | template       +---------+ auto refile   +---------+   auto refile     +---------+ archive       +---------+
    +--------------->|  inbxo  |-------------->|next step|------------------>|  agenda |-------------->| archive |
    |  C-s C-s       +---+-----+               +---------+  C-j s            +---------+  C-j d        +---------+
    |                    |                                                                                  ^
    |                    |                              archiv                                              |
    |                    +----------------------------------------------------------------------------------+
    |                                                   C-j d
  #+END_EXAMPLE

  1. capture -> inbox
  2. 当打开org-agenda或者在org-agenda中按'r', 会自动把inbox中的文件refile到指定位置
  3. 在org-agenda界面操控
  4. C-j d调用archive, 完成archive动作
  5. 其实还有最后一步, 即把archive中的内容输出到blog中
