#+TITLE: rup架构图
#+DATE: 2023-06-13 00:56:49
#+HUGO_CATEGORIES: _others
#+HUGO_TAGS: 
#+HUGO_DRAFT: false
#+hugo_auto_set_lastmod: t
#+OPTIONS: ^:nil
#+OPTIONS: \n:t

RUP4+1架构图

#+hugo: more

* 临时记录

  [[https://blog.51cto.com/liangchaoxi/4052374][参考文章01]]

  [[https://www.zhihu.com/question/30106392][参考文章02]]

* logic view
  逻辑视图. 逻辑视图关注功能. 在uml中由类图来表示 \\
  1. 用户可见的功能
  2. 为实现用户功能而必须提供的"辅助功能模块" \\
     它们可能是逻辑层、功能模块等
* deployment view
  物理视图. 开发出的软件最终如何运行在物理或软件环境上. 在uml中通常使用部署图表示
  1. "目标程序及其依赖的运行库和系统软件"最终如何安装或部署到物理机器
  2. 如何部署机器和网络来配合软件系统的可靠性、可伸缩性等要求


  物理视图和处理视图的关系：\\
  process view特别关注目标程序的动态执行情况; \\
  而deployment view重视目标程序的静态位置问题；deployment view是综合考虑软件系统和整个IT系统相互影响的架构视图。
* implementation view
  开发视图. 关注软件开发环境下实际模块的组织, 反映系统开发实施过程. 在uml通常使用 ???TODO???  表示.
  1. 关注程序包，不仅包括要编写的源程序，还包括可以直接使用的第三方SDK和现成框架、类库
  2. 以及开发的系统将运行于其上的系统软件或中间件


  开发视图和逻辑视图之间可能存在一定的映射关系：比如逻辑层一般会映射到多个程序包等.\\
  一个设计良好的开发视图，应该能够满足以下要求：\\
  1. 通过逻辑架构元素，能够找到它所有代码和所有的二进制交付件
  2. 每一个代码源文件，都能够找到它所属的逻辑架构元素
  3. 每一个二进制交付件，都能够找到它集成了哪些逻辑架构元素

* process view
  处理视图. 在uml通常用时序图和流程图表示
  1. 关注进程、线程、对象等运行时概念
  2. 并发、同步、通信等问题


  处理视图和开发视图的关系：\\
  开发视图一般偏重程序包在编译时期的静态依赖关系;\\
  而这些程序运行起来之后会表现为对象、线程、进程，处理视图比较关注的正是这些运行时单元的交互问题.

* use case viw
  场景视图，即4+1中的1.\\
  从前面的图可以看到，4+1中的4个视图都是围绕着场景视图为核心的. \\
  它用于描述系统的参与者与功能用例间的关系，反映系统的最终需求和交互设计.\\
  在UML中通常由用例图表示
