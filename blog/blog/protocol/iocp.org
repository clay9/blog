#+TITLE: IOCP完成端口
#+LAYOUT: post
#+CATEGORIES: protocol
#+OPTIONS: ^:nil

完成端口

#+HTML: <!-- more -->
* 说明
  完成端口IOCP是windows下的异步非阻塞模型
  : IOCP I/O completion port
  
  推荐文档:
  1. [[https://cloud.tencent.com/developer/article/1470239][完成端口详解 -- by 小猪]]
* 原理图
** TODO 使用模型1
   [[file:iocp/type1.png][模型1]]
** 使用模型2
   [[file:iocp/type2.jpeg][模型2]]
* 具体步骤
  1. 建立完成端口
     #+BEGIN_SRC c++
       HANDLE m_hCompletionPort = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, 0, 0 );
       if (m_hCompletionPort == NULL)
       {
	   std::cout << "完成端口 创建失败" << std::endl;
       }
     #+END_SRC

  2. 建立Worker线程
     #+BEGIN_SRC c++
       //获取系统cpu核心数量
       SYSTEM_INFO SystemInfo;
       GetSystemInfo(&SystemInfo);
       unsigned int dwThreadCount = SystemInfo.dwNumberOfProcessors;

       //建立worker线程
       unsigned int m_nThreads = dwThreadCount * 2; //江湖传言...
       HANDLE* m_phWorkerThreads = new HANDLE[m_nThreads];   
	for (int i = 0; i < m_nThreads; i++)  
	{  
	    m_phWorkerThreads[i] = ::CreateThread(0, 0, _WorkerThread, …);  
	}
     #+END_SRC

  3. 创建一个用于监听的Socket，绑定到完成端口上，然后开始在指定的端口上监听连接请求
     #+BEGIN_SRC c++
       //创建监听线程

       //监听连接
       hConnectSocket = WSAAccept(m_hListenSocket, (SOCKADDR *) & SocketAddr, &nBufferSize, NULL, NULL);
       if (hConnectSocket == INVALID_SOCKET) 
       {
	   std::cout << "accept failed" << std::endl;
	   return false;
       }

       //绑定到完成端口上 -- 注意这里socket对象
       CreateIoCompletionPort((HANDLE)hConnectSocket, m_hCompletionPort, NULL, 0);

       //为该socket投递recv请求
       //buf, bytes, flags, overlapped 对象初始化... 如果不初始化, 非常容易导致错误
       int iRetCode = WSARecv(hConnectSocket, &buf, 1, &bytes, &flags, (OVERLAPPED*)m_recvOverlapped, NULL);
       if (iRetCode == SOCKET_ERROR)
       {    
	   if (WSAGetLastError() != WSA_IO_PENDING)
	   {
	       //WSARecv error
	       return false;
	   }
    
	   // WSARecvFrom() is now operating in the background,
	   // the IOCP port will be signaled when finished...
       }
       else
       {
	   // data is already available,
	   // the IOCP port will be signaled immediately...
       }
     #+END_SRC

  4. woker线程处理
     #+BEGIN_SRC c++
       //等待完成端口
       if(!GetQueuedCompletionStatus(m_hCompletionPort, &rbytes, (PULONG_PTR) & pServerSocketItem, (LPOVERLAPPED*)&myOverlapped, INFINITE))
       {
	   if(myOverlapped)
	   {
	       CLog::Log(log_debug, "[socket::server] rs thread run OnEventThreadRun  WSARecvFrom() failed");
	   }
	   else
	   {
	       CLog::Log(log_debug, "[socket::server] rs thread run OnEventThreadRun  GetQueuedCompletionStatus() failed");
	   }
	   return false;
       }

       //注意: 处理的时候 注意上锁
       switch(myOverlapped->mask)
       {
	       case recv:
	   {
	       do_recv(); //一般do_recv()中需要投递 WSARecv()请求
	       break;
	   }
	       case send:
	   {
	       do_send();
	       break;
	   }
       }
     #+END_SRC
