#+TITLE: linux
#+DATE: 2021-10-18 20:30:33
#+HUGO_CATEGORIES: system
#+HUGO_TAGS: linux
#+HUGO_DRAFT: false
#+hugo_auto_set_lastmod: t
#+OPTIONS: ^:nil

linux常用命令&&工具

#+hugo: more

* 查看系统信息
** cpu
   # 总核数 = 物理CPU个数 X 每颗物理CPU的核数
   # 总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数

   # 查看物理CPU个数
   cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l

   # 查看每个物理CPU中core的个数(即核数)
   cat /proc/cpuinfo| grep "cpu cores"| uniq

   # 查看逻辑CPU的个数
   cat /proc/cpuinfo| grep "processor"| wc -l
 

   # 查看CPU信息（型号）
   cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c
   
** 查看库 (动态库, 静态库)的封装信息
   readelf
   nm
   objdump
  
** fd
   查询
   1. 所有进程允许打开的最大fd数量。查询语句：
      #+BEGIN_EXAMPLE sh
      /proc/sys/fs/file-max
      #+END_EXAMPLE
   2. 所有进程已经打开的fd数量及允许的最大数量。查询语句：
      #+BEGIN_EXAMPLE sh
      /proc/sys/fs/file-nr
      #+END_EXAMPLE
   3. 单个进程允许打开的最大fd数量.查询语句：
      #+BEGIN_EXAMPLE sh
      ulimit -n
      #+END_EXAMPLE
   4. 单个进程（例如进程id为5454）已经打开的fd.查询语句：
      #+BEGIN_EXAMPLE sh
      ls -l /proc/5454/fd/
      #+END_EXAMPLE

** socket
   命令: ss
   socket Statistics -- socket统计信息
   比netstat 更快


* 必备命令(软件)
** top
   #+BEGIN_EXAMPLE sh 信息含义 重点关注 cpu可用%Cpu->id, 内存可用MiB->availMem, 服务器负载情况top-> load average
   # top      当前系统时间; 启动了3小时45分钟; user同时在线的用户; load average服务器1min, 5min, 15min的负载情况
   #          load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。
   #                      如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了
   # Tasks    总共开启了27个进程, 1个在run, 26个sleep, 0stoped, 0僵尸进程zombie
   # %cpu     总核数的平均值(不会大于100%), us用户占比, sy系统占比, ni用户进程空间内改变过优先级的进程占用CPU百分比
   #          id空闲cpu百分比, wa用户进程空间内改变过优先级的进程占用CPU百分比, hi硬件中断, si软件中断, st实时
   # MiB Mem  total系统物理总内存, free空闲内存, used已使用,    buff/cache缓冲区内存
   # MiB Swap total交换总内存,     free交换空闲, used交换已用,  avail 可用内存
   top - 12:19:58 up  3:45,  1 user,  load average: 0.00, 0.02, 0.05
   Tasks:  27 total,   1 running,  26 sleeping,   0 stopped,   0 zombie
   %Cpu(s):  1.5 us,  1.1 sy,  0.0 ni, 97.2 id,  0.0 wa,  0.0 hi,  0.2 si,  0.0 st
   MiB Mem :  64348.3 total,  39305.2 free,  11285.5 used,  13757.6 buff/cache
   MiB Swap:   8192.0 total,   8192.0 free,      0.0 used.  52690.6 avail Mem 


   # pid      pid
   # user     谁启动的该进程
   # PR       优先级
   # ni       nice值 负值表示高优先级，正值表示低优先级
   # VIRT     虚拟内存
   # RES      真实内存
   # SHR      共享内存
   # %CPU     单核cpu占比, 大于100%表示占用了多个cpu核, 不能大于100% * cpu核数
   # TIME+    进程运行总时间??占用cpu的总时间??
   # COMMAND  进程启动时的命令
     PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND

     122 root      20   0   12936   7148   6648 S   1.0   0.0   2:32.20 cli                                                                            
     69  root      20   0   12928   7064   6572 S   0.7   0.0   2:07.64 svr                                                                            
     125 root      20   0   27728  17472   3944 S   0.3   0.0   1:01.14 cli                                                                            
     123 root      20   0   27728  17316   3880 S   0.3   0.0   1:01.08 cli                                                                            
     126 root      20   0   27728  17436   3948 S   0.3   0.0   1:01.07 cli                                                                            
     124 root      20   0   27728  17380   3852 S   0.3   0.0   1:00.94 cli                                                                            
     132 root      20   0   27728  17436   3948 S   0.7   0.0   0:59.75 cli      
   #+END_EXAMPLE
   #+BEGIN_EXAMPLE sh 常用快捷键
   1. 排序
      < -- 左移sort-field; 进入top时候默认sort-field是%cpu
      > -- 右移sort-field
      R -- 反转排序

      M -- (不推荐)根据%mem 排序
      P -- (不推荐)根据%cpu 排序
      T -- (不推荐)根据TIME+排序
   2. 高亮
      b -- 是否高亮显示 <R进程 或者 sort-field>, 总开关
      x -- 是否高亮 sort-field
      y -- 是否高亮 R进程

      z -- (不推荐)高亮显示
      B -- (不推荐)加粗

   3. 其他
      1 -- 显示所有逻辑cpu
      k -- 关闭特定pid进程
      s -- 设置刷新时间
   4. 内存
      m -- 切换mem显示, 显示使用百分比&&总内存 -->  (*used/total)% / total
      t -- 切换cpu显示, 没看明白; 仍然推荐看%Cpu->id 或者1查看所有核心的


   #+END_EXAMPLE
   #+BEGIN_EXAMPLE sh 不足
   1. 最小单位为进程, 线程信息需要通过ps去查看
   #+END_EXAMPLE

** watch
   周期性的执行某个命令

   #+BEGIN_EXAMPLE sh 查看socket统计信息
   watch ss -s
   #+END_EXAMPLE
** crontab
   定时任务, 具体见
   #+BEGIN_EXAMPLE
   man crontab
   #+END_EXAMPLE
** tmux && screen
   为什么使用tmux 和 screen: 远程登录操作时候, 因网络不稳定, 总是掉线, 导致东西无法保存
   讲解它们之前必须要先了解nohup 与 &
*** nohup 与 &
    nohup与 &都是后台运行
    nohup会占用标准输出
    &则不会占用标准输出
    它们的作用都是为了防止session关闭后, 程序无法运行

    但每个程序都要加上 nohup前缀 或者 &后缀, 则会特别麻烦, 因此出现了screen与tmux

*** screen
    screen属于GNU计划
    然其操作什么的并不友善, 个人更倾向于tmux

    【基本指令】
    screen | screen -S <name> 创建screen
    screen -d                 detach screen  只有deatch之后 其他人才能attach
    screen -r                 reatach screen 链接screen
    screen -ls | screen -list 列出所有的screen

    【快捷键操作】
    screen的一个弊端就是将太多功能放在了快捷键上 而不是放在CMD上
    C-a 为screen指令的前缀
    C-a k  kill
    C-a w  列出所有的screen窗口  -- 亲测无效???
    C-a p |C-a n 切换到上一个或下一个窗口 -- 亲测无效??
    C-a z  类似于emacs的C-z 将程序放入后台 可以通过jobs 和fg操作
    通过C-a z可以了解screen的工作原理 -- screen就是新开了一个shell, 在里面有不同的窗口windows
    然后可以在windows间切换, 或者是回到原先的shell中


    【为什么放弃screen】
    虽然查看教程, 发现screen还有很多高级功能, 然而screen的窗口功能太不友好, 导致我经常不知道自己工作
    在哪个窗口下, 而且因为C-a w的无效, 很难有一览全局, 所以最后选择放弃screen, 改投tmux

*** tmux
    _框架_

    server  -> session 01  |
            -> session 02  |  --> socket 01(默认socket)
            -> session 03     --> socket 02(通过-L | -S生成的新的socket)
            ...
	    ...
    即一个server 多个session, session又属于socket

    _基本指令_
    tmux
    tmux ls                  列出所有的tmux session, 注意没有-  --
    tmux attach              attch到上次的tmux session
    tmux attach -t session   attch到指定的tmux session
    tmux kill-session -t     关闭session
    tmux kill-server -t      关闭server
    注: 关闭server 将导致tmux关闭, tmux中的程序也会关闭
        如果session退出之前, tmux是挂起状态stopped,那么下次session重新链接后, 将导致tmux关闭
    tmux new -s $sessionName 创建一个新的session, 并指定其名称, 不然就是递增数字

    _快捷键操作_
    tmux以C-b作为快捷键的前缀
    C-b ?             列出所有的命令
    C-b 数字 | n | p  切换窗口
    C-b C-z           挂起程序
    C-b d             deatach类似于screen中的deatch
                      deatch之后就可以回到正常的shell, 并使tmux运行在后台

    _为什么选择tmux_
    友好的界面, 友好的C-b ?帮助提示, 简单的操作

    _遗留问题_
     1. [ ] 如果运行 tmux& (&后台运行), 会导致莫名其妙的问题
     2. [X] 如何使tmux在后台运行
	使用bg命令无效, 这与进程的状态有关...有时间再看
	C-b d 使当前session deatch运行在后台

** ffmpeg
   : 强大的视频解码软件
   ffmpeg -i https://××××××××/really.m3u8 -c copy  xxx.mp4 

** sort
   根据ASCII进行排序, 默认为升序
   - u 去除重复行
   - r 降序
   - n 根据数值进行排序
     : 你有没有遇到过10比2小的情况。我反正遇到过。
     : 出现这种情况是由于排序程序将这些数字按字符来排序了，排序程序会先比较1和2，显然1小，所以就将10放在2前面
     : -n可以告诉sort根据数值进行排序, 而非ASCII
   - k, t  k指定列数, t指定分隔符
   - f 会将小写字母都转换为大写字母来进行比较，亦即忽略大小写
   
* 管道
** | && xargs
   1. 管道是实现“将前面的标准输出作为后面的标准输入”
   2. xargs是实现“将标准输入作为命令的参数”


   
