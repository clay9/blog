#+TITLE: Mac实用技巧汇总
#+LAYOUT: post
#+CATEGORIES: system
#+TAGS: mac

本文技巧大多来自网上, 只是笔者整理, 方便以后自己和别人查看.

#+HTML: <!-- more -->
* mac系统怎么样
  之前是为了学习linux命令行, 后来是开发环境使用到了xcode.
  mac是一款很稳定的系统, 但是稳定的代价是, 对于大部分游戏都不支持. 所以如果有游戏需求, 非常不建议使用mac. 
  17年开始使用mac, 缺点很明显, 对游戏的支持差. 优点也不少:
  1. 稳定
  2. 广告少! 广告少! 广告少!
  3. 命令行学习使用方便
  4. 原生软件xcode
  
* mac初步整理
  笔者有严重的强迫症, 新上手的东西必须整理一遍才去使用.
  习惯性由大到小, 由外而内的整理方式.
** 界面的整理
   1. launchpad图标大小整理
      1) 每一列图标数量
	 #+BEGIN_EXAMPLE
	 defaults write com.apple.dock springboard-rows -int 7
	 #+END_EXAMPLE
      2) 每一行图标数量
	 #+BEGIN_EXAMPLE
	 defaults write com.apple.dock springboard-columns -int 7
	 #+END_EXAMPLE
      3) 重启Launchpad
	 #+BEGIN_EXAMPLE
	 defaults write com.apple.dock ResetLaunchPad -bool TRUE;killall Dock
	 #+END_EXAMPLE
	 慎用: 该指令重启launchpad的时候, 也会使launchpad的排序恢复默认值!!!
   2. 添加空白到Dock栏
      空白能使Dock中的程序更好的归类
      #+BEGIN_EXAMPLE
      defaults write com.apple.dock persistent-apps -array-add '{"tile-type"="spacer-tile";}'; killall Dock
      #+END_EXAMPLE
** 状态栏调整
   按住Command之后, 鼠标可以拖动状态栏图标
** 输入法的整理
   习惯了搜狗输入法, 并且不喜欢多余的输入法. 因此安装完搜狗输入法for mac之后, 删除mac自带输入法. 具体步骤:
   1. 关闭 mac 系统的 SIP
      1) 重启系统，按住 Command + R 进入恢复模式
      2) 点击顶部菜单栏 实用工具 中的 终端
      3) 输入以下命令来禁用 SIP 保护机制
	 #+BEGIN_EXAMPLE
	 csrutil disable
	 #+END_EXAMPLE
      4) 执行后输出以下信息表示禁用成功
	 #+BEGIN_EXAMPLE
	 Successfully disabled System Integrity Protection. Please restart the machine for the changes to take effect.
	 #+END_EXAMPLE
      5) 重启系统
      6) 如果重新打开 SIP 的方法同上，只是终端中输入的命令改为以下命令
	 #+BEGIN_EXAMPLE
	 csrutil enable
	 #+END_EXAMPLE
   2. 先将输入法切换为系统自带的 ABC 输入法，然后打开终端输入以下命令
      #+BEGIN_EXAMPLE
      sudo open ~/Library/Preferences/com.apple.HIToolbox.plist
      #+END_EXAMPLE
   3. 接着输入密码即可打开 com.apple.HIToolbox.plist 文件。（打开 .plist 文件需要安装有 Xcode 或者 PlistEdit Pro 也行）
   4. 依次点开 Root - AppleEnabledInputSources ，会看到一列 item ，找到其中 KeyboardLayout Name 为 ABC 的那一列，将整列 item 删掉，然后 command + S 保存。
   5. 接着重启电脑，打开键盘设置，就可以看到系统自带的 ABC 输入法已经被删掉了
   6. 如果又想用回自带输入法，只要在 偏好设置 - 键盘 - 输入法 里，按 + 号，把自带的输入法重新添加就可以了
** +Terminal显示颜色设置+ 推荐iTerm代替
   1. ls设置为ls -G的别名
      
      在~/.bash_profile中加入下面的内容:
      #+BEGIN_EXAMPLE
      alias ls="ks -G"
      #+END_EXAMPLE

      并使脚本生效:
      #+BEGIN_EXAMPLE
      source ~/.bash_profile
      #+END_EXAMPLE
   2. 自定义颜色
      
      在~/.bash_profile中加入下面的内容:
      #+BEGIN_EXAMPLE
      export CLICOLOR=1
      export LSCOLORS=gxfxaxdxcxegedabagacad
      #+END_EXAMPLE

      并使脚本生效:
      #+BEGIN_EXAMPLE
      source ~/.bash_profile
      #+END_EXAMPLE
   3. 颜色配置说明
      LSCOLORS中一共11组颜色设置，按照先后顺序，分别对以下的文件类型进行设置：
      #+BEGIN_EXAMPLE
      directory
      symbolic link
      socket
      pipe
      executable
      block special
      character special
      executable with setuid bit set
      executable with setgid bit set
      directory writable to others, with sticky bit 
      directory writable to others, without sticky bit
      #+END_EXAMPLE      
      
      LSCOLORS中，字母代表的颜色如下：
      #+BEGIN_EXAMPLE
   　　a 黑色
   　　b 红色
   　　c 绿色
   　　d 棕色
   　　e 蓝色
   　　f 洋红色
   　　g 青色
   　　h 浅灰色
   　　A 黑色粗体
   　　B 红色粗体
   　　C 绿色粗体
   　　D 棕色粗体
   　　E 蓝色粗体
   　　F 洋红色粗体
   　　G 青色粗体
   　　H 浅灰色粗体
   　　x 系统默认颜色
      #+END_EXAMPLE      
** +删除不需要的系统软件+ 强烈建议不删除

* mac好用的软件
** Alfred
   [[https://www.alfredapp.com][Alfred]] 是加强版的聚焦搜索, 支持自定义编程, 非常强大
   #+BEGIN_EXAMPLE
   之前先买了Manico, paster
   发现这些功能Alfred都可以更好的完成...
   #+END_EXAMPLE
** Karabiner
   [[https://pqrs.org/index.html][Karabiner]] 是一款好用的键位映射软件
** +1password+
   +[[https://1password.com][1password]] 是非常好用的密码管理软件+
   不再推荐使用, 支持不够好, 不如mac自带的好用
** +Manico+
   +不打开launchpad情形下, 快速打开需要的app软件+
   +使用的[[https://manico.im][manico]], 虽然是收费的, 但是效果确实很不错+
   推荐使用Alfred代替
** +paste+
   +[[https://pasteapp.me][paste]] 非常好用的粘贴复制软件, 记录了之前的复制记录+
   推荐使用Alfred代替
** HomeBrew
   [[https://brew.sh/index_zh-cn][HomeBrew]] 是一款包管理软件, 类似于ubuntu下的apt
** iterm
   [[https://www.iterm2.com][iterm]] 是非常好用的终端软件
** Annotate
   Annotate (App Store下载) 是非常好用的截屏软件, 同时支持gif
** IINA
   [[https://www.iina.io][IINA]] 是mac下最好用的视频软件

* mac实用技巧
** crontab
   定时任务, 具体见
   #+BEGIN_EXAMPLE
   man crontab
   #+END_EXAMPLE
** Dock上隐藏运行的程序
   1. 进入要隐藏的程序的Contents目录
      #+BEGIN_EXAMPLE
      cd App_Path/Contents
      #+END_EXAMPLE
   2. 编辑info.plist文件
      #+BEGIN_EXAMPLE
      sudo vim info.plist
      #+END_EXAMPLE
   3. 添加下面的代码
      #+BEGIN_EXAMPLE
      <key>LSUIElement</key>
      <true/>
      #+END_EXAMPLE
   4. 上面的方法并不是万能的，有些软件并不能这么设置，设置了会导致打不开，例如teamview，应该还要修改其他设置，但是大多数软件都可以通过此方法进行修改，如果出错了按此方法修改回去就可以了
   5. 关于teamviewer的隐藏，需要在终端执行下面的命令
      #+BEGIN_EXAMPLE
      sudo bash -c 'killall TeamViewer_Service; killall TeamViewer; killall TeamViewer_Desktop; perl -i -0pe "s/<\/dict>\n<\/plist>/\t<key>LSUIElement<\/key>\n\t<string>1<\/string>\n<\/dict>\n<\/plist>/g" /Applications/TeamViewer.app/Contents/Info.plist; codesign -f -s - /Applications/TeamViewer.app; launchctl unload /Library/LaunchDaemons/com.teamviewer.teamviewer_service.plist; launchctl load /Library/LaunchDaemons/com.teamviewer.teamviewer_service.plist'
      #+END_EXAMPLE
** tmux && screen
   为什么使用tmux 和 screen: 远程登录操作时候, 因网络不稳定, 总是掉线, 导致东西无法保存
   讲解它们之前必须要先了解nohup 与 &
*** nohup 与 &
    nohup与 &都是后台运行
    nohup会占用标准输出
    &则不会占用标准输出
    它们的作用都是为了防止session关闭后, 程序无法运行

    但每个程序都要加上 nohup前缀 或者 &后缀, 则会特别麻烦, 因此出现了screen与tmux

*** screen
    screen属于GNU计划
    然其操作什么的并不友善, 个人更倾向于tmux

    【基本指令】
    screen | screen -S <name> 创建screen
    screen -d                 detach screen  只有deatch之后 其他人才能attach
    screen -r                 reatach screen 链接screen
    screen -ls | screen -list 列出所有的screen

    【快捷键操作】
    screen的一个弊端就是将太多功能放在了快捷键上 而不是放在CMD上
    C-a 为screen指令的前缀
    C-a k  kill
    C-a w  列出所有的screen窗口  -- 亲测无效???
    C-a p |C-a n 切换到上一个或下一个窗口 -- 亲测无效??
    C-a z  类似于emacs的C-z 将程序放入后台 可以通过jobs 和fg操作
    通过C-a z可以了解screen的工作原理 -- screen就是新开了一个shell, 在里面有不同的窗口windows
    然后可以在windows间切换, 或者是回到原先的shell中


    【为什么放弃screen】
    虽然查看教程, 发现screen还有很多高级功能, 然而screen的窗口功能太不友好, 导致我经常不知道自己工作
    在哪个窗口下, 而且因为C-a w的无效, 很难有一览全局, 所以最后选择放弃screen, 改投tmux

*** tmux
    _框架_

    server  -> session 01  |
            -> session 02  |  --> socket 01(默认socket)
            -> session 03     --> socket 02(通过-L | -S生成的新的socket)
            ...
	    ...
    即一个server 多个session, session又属于socket

    _基本指令_
    tmux
    tmux ls                  列出所有的tmux session, 注意没有-  --
    tmux attach              attch到上次的tmux session
    tmux attach -t session   attch到指定的tmux session
    tmux kill-session -t     关闭session
    tmux kill-server -t      关闭server
    注: 关闭server 将导致tmux关闭, tmux中的程序也会关闭
        如果session退出之前, tmux是挂起状态stopped,那么下次session重新链接后, 将导致tmux关闭
    tmux new -s $sessionName 创建一个新的session, 并指定其名称, 不然就是递增数字

    _快捷键操作_
    tmux以C-b作为快捷键的前缀
    C-b ?             列出所有的命令
    C-b 数字 | n | p  切换窗口
    C-b C-z           挂起程序
    C-b d             deatach类似于screen中的deatch
                      deatch之后就可以回到正常的shell, 并使tmux运行在后台

    _为什么选择tmux_
    友好的界面, 友好的C-b ?帮助提示, 简单的操作

    _遗留问题_
     1. [ ] 如果运行 tmux& (&后台运行), 会导致莫名其妙的问题
     2. [X] 如何使tmux在后台运行
	使用bg命令无效, 这与进程的状态有关...有时间再看
	C-b d 使当前session deatch运行在后台

** | && xargs
   1. 管道是实现“将前面的标准输出作为后面的标准输入”
   2. xargs是实现“将标准输入作为命令的参数”
** mac卡顿处理
   1. 删除Macintosh HD/系统/资源库/Caches中的文件
   2. 删除Macintosh HD/资源库/Caches中的文件
   3. 如果以上无效, 建议更换操作系统版本, 比如从macOS high sierra更换为macOS Mojave
** 安装gcc (g++)
   mac上默认的gcc(g++)实际是苹果的Apple LLVM. 不是说这个不好, 而是很多时候gnu的gcc对于c++更标准些(待商榷?).

   1. 安装[[https://www.macports.org/install.php][port]]
   2. 搜索gcc
      #+BEGIN_EXAMPLE
      port search gcc
      #+END_EXAMPLE
   3. 安装gcc
      #+BEGIN_EXAMPLE
      sudo port install gcc8 #这里选了最新的稳定版
      #+END_EXAMPLE
      不要使用brew安装, 不然后面无法使用port指定苹果的gcc版本
   4. 查看安装的版本
      #+BEGIN_EXAMPLE
      port select --list gcc
      #+END_EXAMPLE
   5. 切换版本
      #+BEGIN_EXAMPLE
      sudo prot select --set gcc mp-gcc8
      #+END_EXAMPLE
   6. 清空bash缓存
      #+BEGIN_EXAMPLE
      hash -r
      #+END_EXAMPLE
      查看gcc版本
      #+BEGIN_EXAMPLE
      gcc -v ## 或g++ -v
      #+END_EXAMPLE
** 实用快捷键
   | 快捷键               | 功能说明 | 备注                  |
   |----------------------+----------+-----------------------|
   | Command + c          | 选中文件 |                       |
   |----------------------+----------+-----------------------|
   | Command + v          | 粘贴     | Command-c之后才能操作 |
   |----------------------+----------+-----------------------|
   | Command + option + v | 剪切     | Command-c之后才能操作 |
   |----------------------+----------+-----------------------|
   | Command + 空格       | 聚焦搜索 | 非常好用的搜索        |
   |----------------------+----------+-----------------------|
** 无用程序关闭
   1. 聚焦
      作用: Command+空格的 聚焦搜索
      影响进程: mds、mds_stores、mdworker
      关闭原因: 实际没必要, 追求效率的, 可以关掉
      #+BEGIN_EXAMPLE
      #关闭
      sudo mdutil -a -i off
      
      #打开
      sudo mdutil -a -i on
      #+END_EXAMPLE
** ssh远程连接mac os, 中文乱码
   这种情况一般是终端和服务器的字符集不匹配，MacOSX下默认的是utf8字符集。输入locale可以查看字符编码设置情况，而我的对应值是空的。因为我在本地和服务器都用zsh替代了bash，而且使用了oh-my-zsh，而默认的.zshrc没有设置为utf-8编码，所以本地和服务器端都要在.zshrc设置，步骤如下，bash对应.bash_profile或.bashrc文件。
   
   1. 在.bash_profile中增加
      #+BEGIN_EXAMPLE
      export LC_ALL=en_US.UTF-8  
      export LANG=en_US.UTF-8
      #+END_EXAMPLE
   2. source .bash_profile
   3. locale 查看下是否设置成功
   4. 完成
** ffmpeg
   ffmpeg -i https://××××××××/really.m3u8 -c copy  xxx.mp4 
