#+TITLE: gdb && gud
#+INFOJS_OPT: path:../script/org-info.js
#+INFOJS_OPT: home:http://wcq.fun
#+INFOJS_OPT: toc:t ltoc:t
#+INFOJS_OPT: view:info mouse:underline buttons:nil

* 功能
  - gdb: 调试软件
  - gud: emacs中调用gdb
* 安装
  gud为emacs自带;
  gdb可以在gnu.org下载
* 配置
  [[file:emacs_gdb/init-gdb.el][具体配置]]
* gdb使用
  | 指令       | 简写 | 描述                                                                             |
  |------------+------+----------------------------------------------------------------------------------|
  | attach     |      | 附加到已经运行的程序                                                             |
  |------------+------+----------------------------------------------------------------------------------|
  | run        | r    | 运行程序，当遇到断点后，程序会在断点处停止运行，等待用户输入下一步命令           |
  |------------+------+----------------------------------------------------------------------------------|
  | continue   | c    | 继续执行，到下一个断点停止（或运行结束）                                         |
  |------------+------+----------------------------------------------------------------------------------|
  | next       | n    | 单步跟踪程序，当遇到函数调用时，也不进入此函数体                                 |
  |------------+------+----------------------------------------------------------------------------------|
  | step       | s    | 单步调试如果有函数调用，则进入函数；与命令n不同，n是不进入调用的函数的           |
  |------------+------+----------------------------------------------------------------------------------|
  | until      | u    | 当你厌倦了在一个循环体内单步跟踪时，这个命令可以运行程序直到退出循环             |
  |------------+------+----------------------------------------------------------------------------------|
  | until+行号 |      | 运行至某行，不仅仅用来跳出循环                                                   |
  |------------+------+----------------------------------------------------------------------------------|
  | finish     |      | 运行程序，直到当前函数完成返回，并打印函数返回时的堆栈地址和返回值及参数值等信息 |
  |------------+------+----------------------------------------------------------------------------------|
  | quit       | q    | 退出gdb                                                                          |
  |------------+------+----------------------------------------------------------------------------------|
  | up         |      | 上个stack                                                                        |
  |------------+------+----------------------------------------------------------------------------------|
  | down       |      | 下个stack                                                                        |
  |------------+------+----------------------------------------------------------------------------------|
  | watch      |      | 变量监控                                                                         |
  |------------+------+----------------------------------------------------------------------------------|
  | breakpoint | b    | file :line_num   文件:行号                                                       |
  |            |      | <fun_name>       函数名字                                                        |
  |------------+------+----------------------------------------------------------------------------------|

  run相当于重新启动程序, 但是由于某些原因(找不到库? 怀疑是变量不同), 容易导致程序启动失败
  continue 相当于继续执行, 一般在接attach和gdb Server之后使用, 使程序继续执行 

* gud使用
  | buffer名字 | 简述               | 备注                                 |
  |------------+--------------------+--------------------------------------|
  | gud        | gdb命令输入窗口    |                                      |
  |------------+--------------------+--------------------------------------|
  | source     | 调试时自动显示源码 | 不要edit, 否则导致source自动关联失效 |
  |------------+--------------------+--------------------------------------|
  | breakpoint | 断点               | 不会命中的断点显示为pending          |
  |------------+--------------------+--------------------------------------|
  | threads    | 线程               |                                      |
  |------------+--------------------+--------------------------------------|
  | stack      | 堆栈               |                                      |
  |------------+--------------------+--------------------------------------|
  | local      | local变量          |                                      |
  |------------+--------------------+--------------------------------------|
  | register   | 寄存器             |                                      |
  |------------+--------------------+--------------------------------------|
  | assembler  | 显示汇编           |                                      |
  |------------+--------------------+--------------------------------------|
  | memory     | 内存查看           |                                      |
  |------------+--------------------+--------------------------------------|
  
  为了显示方便,  
  breakpoint与threads buffer同在一个frame;
  local与register buffer同在一个frame;
  可以按"TAB"快速切换

** 例子
   1. emacs: M-x gdb RET
   2. gud: attch <program pid>
   3. 设置breakpoint
      - gud: b
      - source: gud-break; gud-tbreak
      - breakpoint: D 删除断点
   4. 设置watch
      - gud: watch
      - souce: gud-watch
** 问题
   1. gud中在continue之后, 程序运行; 此时输入, gud并没有反应; 但是在程序运行到断点的时候, 之前的输入全部变成了命令.
      简单来说, gud没有舍弃之前的无效输入, 而是等待机会, 使之生效
   2. gdb continue之后 如何退出
      1) gdb进程中可以使用C-c, 退出attach所关联的进程
      2) emacs-gdb中如何退出 ?? TODONOW

  
  
  
  
