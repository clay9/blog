#+TITLE: 静态库 && 动态库
#+DATE: 2021-08-28 15:15:13
#+HUGO_CATEGORIES: protocol
#+HUGO_TAGS: 
#+HUGO_DRAFT: false
#+hugo_auto_set_lastmod: t
#+OPTIONS: ^:nil

linux下静态库 && 动态库
#+hugo: more
* 差异区别
  1. 编译连接静态库时, 会copy一份静态库镜像到目标文件;
     编译连接动态库时, 不会copy
  2. 程序运行时, 无须再去访问原静态库;
     程序运行时, 要能访问到动态库文件
  3. 静态库 .a
     动态库 .so (shared object)
     
* 生成方式
  1. 静态库
     : A.由源文件编译生成一堆.o，每个.o里都包含这个编译单元的符号表
     : B.ar命令将很多.o转换成.a，生成文静态库     

  2. 动态库
     A.gcc 加特定参数 编译 fPIC生成动态的.o文件; shared把动态.o文件打包为动态库
     : gcc -fPIC file1.c -c                 //这一步生成file1.o
     : gcc -shared file1.o -o libtest.so    //把.o文件打包为动态库(.o文件必须是 fPIC生成)

* 常见问题
  1. 运行时候找不到动态库, 处理方式
     #+BEGIN_EXAMPLE
    （1) 最直接最简单的方法就是把so拉到/usr/lib或/lib中去，但这好像有点污染环境吧？
    （2）export LD_LIBRARY_PATH=$(pwd)
    （3）可以在/etc/ld.so.conf文件里加入我们生成的库的目录，然后/sbin/ldconfig 
    #+END_EXAMPLE
  2. 加载动态库
     函数原型：void *dlopen(const char *libname,int flag);
     1) 参数中的libname一般是库的全路径，这样dlopen会直接装载该文件；
	#+BEGIN_EXAMPLE
        如果只是指定了库名称，在dlopen在查找库的过程中会按照如下路径进行搜索：
        a.根据环境变量LD_LIBRARY_PATH查找
        b.根据/etc/ld.so.cache查找
        c.查找依次在/lib和/usr/lib目录查找。
	#+END_EXAMPLE
     2) flag参数表示处理未定义函数的方式，可以使用RTLD_LAZY或RTLD_NOW。
        : RTLD_LAZY表示暂时不去处理未定义函数，先把库装载到内存，等用到没定义的函数再说；
        : RTLD_NOW表示马上检查是否存在未定义的函数，若存在，则dlopen以失败告终。


  
* 动态库再认知

** 结论
   动态库允许延迟定义,
   但是在连接为可执行文件时, 所有动态库的声明必须有定义
   
** 测试
   A 依赖libbase.so, B依赖libA
   A编译的时候, 不指定libbase.so(但是要include base的头文件), 可以编译成功
   : 延迟定义

   B -lA 编译, 编译成功, 连接失败, 提示libA没有xxx的定义(在libbase中)
   若B -lA -lbase, 则编译连接都成功
   : 连接为执行文件的时候, 所有的声明都必须要有定义
   : 而且这个定义可以是在A中-lbase, 也可以是在B中 -lbase
   : 说明-lbase只是告之符合连接表而已
