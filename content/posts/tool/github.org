#+TITLE: github
#+DATE: 2021-09-23 21:43:27
#+HUGO_CATEGORIES: tool 
#+HUGO_TAGS: github
#+HUGO_DRAFT: false
#+hugo_auto_set_lastmod: t
#+OPTIONS: ^:nil

github记录

#+hugo: more

* github 认证方式
  Github 本身提供了多种认证方式，所有开发人员可以各取所需。

  1. SSH，这是最原始的方式，如果使用git bash只要按照官方文档一步一步配置就好了
     小心坑：SSH有可能需要配置代理，否则无法解析服务器域名。错误如下：
     ssh: Could not resolve hostname github.com: no address associated with name
     解决办法：给SSH以及git 客户端配置代理。
  2. HTTPS，这也是比较方便的方式，但是每一次都需要输入用户名和密码。
     小心坑：本机的SSL证书不是正规机构颁发的，验证失败。错误如下：
     fatal: unable to access 'https://github.com/owner/repo.git/': SSL certificate problem: unable to get local issuer certificate

     解决办法：将Git的SSL验证关闭，命令如下。
     git config --global http.sslVerify false
  3. Access Token，我个人认为最为便捷的方式之一，不失安全性。
     https://help.github.com/articles/creating-an-access-token-for-command-line-use/
     使用方法：
     1) 从Settings页面生成唯一的Token
     2) 手动拼接出远程仓库的地址，比如：https://$GH_TOKEN@github.com/owner/repo.git
     3）从以上地址克隆或使用git remote add 的方式关联本地仓库，之后都不需要输入用户名和密码信息


* github action实例解析 -- hugo
  : workflow中所有缩进必须是空格, 不能是tab
# name -- github action中显示的名字
name: github page

# on  -- 触发workflow的条件
on:
  # push动作触发, 可以指定分支
  push:
    branches:
      - master  # Set a branch to deploy
  # pull request触发 -- 是有人请求合并而你同意的时候触发, 不是git pull
  pull_request:
# jobs -- 工作流程运行包括一项或多项作业, 作业默认是并行运行, 要按顺序运行作业, 使用 <job_id>needs
jobs:
  # 这个只是jobs下的任务名字, 自定义
  deploy:
    # runs-on github支持的托管运行器, 支持window,linux与macos
    runs-on: ubuntu-20.04
    # steps -- job 步骤的唯一标识, 标识处理哪些step
    steps:
      # 下载本git仓库中的代码, 也可以下载submodules
      - uses: actions/checkout@v2
        with:
          submodules: true  # Fetch Hugo themes (true OR recursive)
          fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod

      # name -- step步骤显示在github中的名字
      - name: Setup Hugo
        # uses -- 选择要作为作业中步骤的一部分运行的操作。 操作是一种可重复使用的代码单位
        #        uses实际是在github中寻找user为peaceiris的仓库为action-hugo的tag为v2的commit节点
        #        猜测是把该commit节点的执行文件放到runs-on的服务器上, 然后执行操作
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          # extended: true

      # 执行hugo的编译动作
      - name: Build
        run: hugo --minify

      # 发布到./public
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
	# if -- 为条件判断
        if: github.ref == 'refs/heads/master'
	# with -- 应该是uses中所需要的参数
        with:
          github_token: ${{ secrets.HUGO_PUBLISH_TOKEN }}
          publish_dir: ./public


* github action实例解析 -- qygame调用docker
  # 因为这个yml是给别人使用的(元数据), 所以其名字必须是action.yml. 详情见github的action说明
# 名字 && 作者 && 该yml描述
name: 'make for qygame'
autho: wcq
description: 'make for qygame'

# 输入的信息
inputs:
  # 输入的字段名称
  qygame_token:
    # 字段描述
    description: 'Set a generated GITHUB_TOKEN for pushing to the remote branch.'
    # 是否是必须输入
    required: true

# 运行命令    
runs:
  # 强烈推荐使用这种方式调用docker, 比较方便
  using: 'docker'
  # 通过Dockerfile来指定docker的行为, 而不是通过action.yml
  image: 'Dockerfile'
