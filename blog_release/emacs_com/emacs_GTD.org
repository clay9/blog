#+TITLE: GTD && org-mode
#+INFOJS_OPT: path:../script/org-info.js
#+INFOJS_OPT: toc:t ltoc:t
#+INFOJS_OPT: view:info mouse:underline buttons:nil

* 为什么要用GTD
  每天或每周需要处理的事情非常之多, 小到晚上要洗衣服, 大到明天项目交付. 这些事情如果都存储在脑中, 轻则
  焦虑不堪, 重则脑子爆炸. 而且脑中一旦塞满了这类事情, 非常不利于思考. 大脑应该是拿来思考的, 而不是用来存
  储的. 假设一种情形, 大脑只用来思考, 而存储则放在大脑之外, 那么我们就不必因当下之外的事情而焦虑, 能够更
  专一的处理当下的问题. 同时, 如果外在存储能够提醒我们何时该思考何问题, 那么我们也不会因错过了某事而悔恨
  ,比如女友生日. 而这也是GTD的目的所在, 大脑只用来思考, 存储在脑外.
* GTD是什么
** 人生5楼
   了解GTD之前, 必须了解人生5楼.

   | 楼数 | 功能     | 说明    | 备注    |
   |------+----------+---------+---------|
   | 5楼  | 人生规划 |         |         |
   |------+----------+---------+---------|
   | 4楼  | 3年目标  |         |         |
   |------+----------+---------+---------|
   | 3楼  | 1年目标  |         |         |
   |------+----------+---------+---------|
   | 2楼  | 职责范围 |         |         |
   |------+----------+---------+---------|
   | 1楼  | 项目     |         | GTD管理 |
   |------+----------+---------+---------|
   | 地面 | 行动清单 | 归属1楼 | GTD管理 |
   |------+----------+---------+---------|

   把人生(或部分人生)比喻成一座大厦, 1楼是我们当下要做的事情, 2楼是我们的职责范围, 3楼是我们1年后的样
   子, 4楼是我们3年后的样子, 5楼是我们人生(10年, 20年或一辈子)的规划.

   _我们的人生是高层决定了低层_. 比如, 如果想成为计算机专家(5楼), 那么3年后要先成为工程师(4楼), 1年后
   要先成为程序员(3楼). 为了要成为程序员, 也许我们需要去报班学习(2楼职责为学习),或者成为程序员助理(2楼职
   责为搬砖). 而1楼则是我们当下要确确实实需要处理的事情, 比如看书, 工作, 与同事交流等, 所有一切能对我们有
   提升的事情.

   _大厦是由低到高建造的_. 千里之行, 始于足下. 1楼的行为直接决定了能否达到后面的楼层.

   大厦最难的地方不在于实现5楼的规划, 而在于制定5楼的规划. 不过这也正是人生的魅力所在吧.
** GTD是什么
   GTD全名Getting things done, 它只是一种思想, 所能管理的是大厦的1楼.
   它的核心目的: 事物存储在脑外, 大脑用来思考.

   GTD的工作流程(算法)甚至文件(结构)都是可以自定义的. 适合的才是最好的.

   吐槽: 中文译本《Getting things done》满篇废话.
* GTD怎么实现
  GTD的实现方式非常之多, 有很多软件工具. 最喜欢的还是org-mode(emacs 插件).
* org mode怎么实现GTD
** 需求分析
   所有的设计都是基于需求的, 应该先有需求, 再去设计.
   当前的需求:
   1. 有哪些task
      - [X] 他们归属于哪个PROJECT
      - [X] 他们的四象限: 紧急&&重要
      - [X] 工作量预估
      - [ ] 关联性 A task可能与B, C相关联
        : TODO 该任务并未完成
   2. 当前正在处理的任务
      尽可能的关注当前, 忽略其他
   3. 当某个task进行时, 快速capture我的想法, 并且自动refile
   4. 看到自己花费的时间
      - [X] 一天,一周都做了什么
      - [X] 某个PROJECT总共花费的时间

** 思路的设计
   5楼 到 地面视角
   | 楼数 | 功能     | 说明    | 备注    |
   |------+----------+---------+---------|
   | 5楼  | 人生规划 |         |         |
   |------+----------+---------+---------|
   | 4楼  | 3年目标  |         |         |
   |------+----------+---------+---------|
   | 3楼  | 1年目标  |         |         |
   |------+----------+---------+---------|
   | 2楼  | 职责范围 |         |         |
   |------+----------+---------+---------|
   | 1楼  | 项目     |         | GTD管理 |
   |------+----------+---------+---------|
   | 地面 | 行动清单 | 隶属1楼 | GTD管理 |
   |------+----------+---------+---------|
   备注 : GTD管理的其实是 1楼 && 地面的清单

** 流程的设计
   #+BEGIN_EXAMPLE artist-mode
     -------------------------+------------------------
                              |
                              | capture (easy)
                              |
                              |
                              v
          archive        +---------+
     +-------------------|  inbox  |
     |                   +----+----+
     |                        |
     |                        | refile (auto)
     |                        |
     |                        |
     |       |----------------+--------------------|
     |       |                |                    |
     |       |                v                    v
     |       v           +---------+          +---------+
     |  +---------+      | my/emacs|          | work/qy |
     |  |  task   |      |  * emacs|          |  * ker  |
     |  +----+----+      |  * org  |          |  * frame|
     |       |           |  * ccIDE|          |  * sub  |
     |       |           +---------+          +---------+
     |       |
     |       | archive (auto)
     |       |
     |       v
     |  +---------+
     +->| archive |
        +----+----+
   #+END_EXAMPLE
** 文件的设计
   区分目录是为了更好的给PROJECT做分类处理, 使后续的统计查看更方便. 比如org-agenda `R统计时间
   gtd_common中保存的是一些通用的, 可能暂时不好归类的PROJECT以及一系列TODO任务.
   而gtd_emacs与gtd_qygame则是已经明确分类的PROJECT.
   比如gtd_emacs/emacs.org明确的是与emacs有关的任务.
   但即使都是emacs相关, 也可分为是emacs自身, org, 还是cc-IDE.
   所以emacs.org中实际包含了上面三个PROJECT.
   #+BEGIN_EXAMPLE org emacs.org
   * emacs
   * org
   * ccIDE
   #+END_EXAMPLE

   | 目录       | 说明                 | 备注        |
   |------------+----------------------+-------------|
   | gtd_common | 通用gtd流程文件      | inbox.org   |
   |            |                      | task.org    |
   |            |                      | archive.org |
   |------------+----------------------+-------------|
   | gtd_emacs  | emacs project files  |             |
   |------------+----------------------+-------------|
   | gtd_qygame | qygame project files |             |
   |------------+----------------------+-------------|

   gtd_common中的文件:
   | 文件名      | 说明     | 备注                       |
   |-------------+----------+----------------------------|
   | inbox.org   | 收集箱   | 不区分时间, 不区分场景     |
   |             |          | 灵光一闪即可扔进去保存     |
   |-------------+----------+----------------------------|
   | task.org    | 任务清单 | 1. priority标签            |
   |             | task     | 2. 四象限约束              |
   |-------------+----------+----------------------------|
   |             | 项目清单 | 1. 凡是steps>1的都属于项目 |
   |             | project  |                            |
   |-------------+----------+----------------------------|
   | archive.org | 参考资料 | 1. 有参考价值的东西        |
   |             |          | 2. 垃圾箱                  |
   |-------------+----------+----------------------------|
   备注:
   1. task 与 project的唯一区别
      task只有one step,  project的steps > 1
   2. 文件都是通过流程来操作的, 不应该手动去干预
   3. 没增加一个工程, 应该增加一个对应的gtd_xx目录

** TODO的设计
   | 名称     | 功能         | 备注 |
   |----------+--------------+------|
   | TODO     | 等待自己处理 |      |
   |----------+--------------+------|
   | WAITTING | 等待他人完成 |      |
   |----------+--------------+------|
   | DONE     | 完成         |      |
   |----------+--------------+------|
   | CANCEL   | 取消         |      |
   |----------+--------------+------|
   备注:
   1. 针对的对象是下一步行动清单
   2. project中的下一步行动即是最上层的行动;
      task中的下一步行动是依据四象限法则来确定的.
   3. TODO与WAITTING的含义, 表示该行动正在或即将处理

** TAGS的设计
   四象限使用proirity来区分;
   TAGS为之后快速查找使用

** PROPERTY的设计
   当前主要使用的字段
   1. P_UUID
      PROEJCT item的标志, 主要影响auto refile
   2. HIDE_WHEN_STUCK
      PROJECT item的属性, 控制了是否在agenda中显示
      有些PROJECT是长久开启的, 不会关闭. 比如emacs
      当这类PROJECT没有task时, 就变成了STUCK项目. 但我们并不希望将这类PROJECT在agenda中显示.
      所以有了HIDE_WHEN_STUCK.

      #+BEGIN_EXAMPLE artist
        +------------+----------------+
        |  not stuck |  stuck project |
        |            |                |
        |            |   +---+        |
        |            |   |   |        |
        |            |   |   +--------+--------> stuck but also hide
        |            |   +---+        |          HIDE_WHEN_STUCK
        |            |                |
        |            |                |
        +------------+----------------+
      #+END_EXAMPLE
** Effort的设计
   effort是自己对某个task工作量的预估, 与clock-sum-time比对, 可以很好的进行分析.
   为了方便的effort, 这里只在两处设计了提示:
   1. capture的时候, 可以输入effort. 当然为了快速capture, 这里允许输入0跳过
   2. clock-in的时候, 如果item effort还是0, 则会要求进入工作预估
** clock的设计
   org的clock已经非常好用了. 这里只是做了一点点修改:
   1. 快捷键快速clock-in, clock-out
   2. 如果当前没有clock, 会在agenda界面做个提示

** capture设计
   经常是在工作的时候, 突然有了某个想法. 这个想法也许值得记录, 但不要打断当前的思路. 所以需要capture
   capture应该是快速的, 但又要明确的(归属要明确, 最好effort要明确)

   为了快速capture, 所以不应该考虑这个想法应该放到哪个file. 统一放到inbox即可.
   为了后面的auto refile, 这个想法或item 应该携带足够的信息, 可以完成auto refile.
   这里的办法是给item一个tag.
   比如 capture了一个item, 再给其增加对应的tag
   : * org应该快速capture :org:
   这样就表明了这是一个与org PROJECT有关的task
** refile的设计
   refile应该是自动完成的, 不应该手动
   为了自动完成, item已经给了相关信息(tag)
   在gtd_my或gtd_work的PROJECT中, 也应该携带足够的信息去与该tag匹配. 只有匹配成功了, 就可以auto-refile
   这里的办法是给PROJECT item一个Property (P_UUID)来实现
   比如
   #+BEGIN_EXAMPLE org
   * PROJECT org                                                       :org:
     :PROPERTIES:
     :P_UUID:   org
     :END:
   #+END_EXAMPLE
   当capute-item的tag 与 PROJECT-item的P_UUID相匹配的时候, 会自动refile
** archive的设计
   对于gtd_my, gtd_work中的task, 没必要archive
   对于gtd_common中的task, 应该自动archive

** Agent的设计
   agent的目的有2个:
   1. 查看各种代办事项
      今天的, 未来的, TODO的, inbox中的
   2. 统计信息
      一是以time为视角的统计, 比如今天或这周做了哪些TODO或PROJECT
      二是以PROJECT为视角的统计. 比如统计emacs PROJECT花费的时间


   查看代办事项, 主要是org-agenda-view, org-next-view, org-inbox-view 查看
   查看统计信息, 主要是org-project-view, org-archive-view 以及在特定PROJECT file中的org-colmun-view查看具体


   快捷键主要是为了方便.比如
   - 空格滚动各种view
   - tab在另一个窗口显示item narrow
   - enter则进入item编辑
   - 常用的功能都会放到C-j中处理 等等

** 使用流程
   #+BEGIN_EXAMPLE
     |
     | capture with                                         add timestamp &&              add DONE &&
     | template       +---------+ auto refile   +---------+   auto refile     +---------+ auto archive  +---------+
     +--------------->|  inbxo  |-------------->|next step|------------------>|  agenda |-------------->| archive |
     |  C-c c         +---+-----+               +---------+  C-j s,d          +---------+  C-j t        +---------+
     |                    |                                                                                  ^
     |                    |                       add DONE && auto refile                                    |
     |                    +----------------------------------------------------------------------------------+
     |                                                  C-j t
   #+END_EXAMPLE

   1. C-c c   -> inbox
      : info, todo, waiting, project 都会放到inbox
   2. 当打开org-agenda(主动调用"r")或者在org-agenda中按'r' 会自动把inbox中的文件refile到指定位置
   3. 在org-agenda界面操控
      C-j 以及常用的快捷键 t, space, tab, enter等
   4. org-agenda界面的'r'动作, 不仅可以把inbox中的文件reflie, 也可以把task.org中完成的任务archive
   5. 其实还有最后一步, 即把archive中的内容输出到blog中
      : blog具体见 hugo的文档
      : 不建议删除已完成或cancel的task. 后期统计可以使用
