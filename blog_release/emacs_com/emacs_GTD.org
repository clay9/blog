#+TITLE: GTD && org-mode
#+INFOJS_OPT: path:../script/org-info.js
#+INFOJS_OPT: toc:t ltoc:t
#+INFOJS_OPT: view:info mouse:underline buttons:nil

* 为什么要用GTD
  每天或每周需要处理的事情非常之多, 小到晚上要洗衣服, 大到明天项目交付. 这些事情如果都存储在脑中, 轻则
  焦虑不堪, 重则脑子爆炸. 而且脑中一旦塞满了这类事情, 非常不利于思考. 大脑应该是拿来思考的, 而不是用来存
  储的. 假设一种情形, 大脑只用来思考, 而存储则放在大脑之外, 那么我们就不必因当下之外的事情而焦虑, 能够更
  专一的处理当下的问题. 同时, 如果外在存储能够提醒我们何时该思考何问题, 那么我们也不会因错过了某事而悔恨
  ,比如女友生日. 而这也是GTD的目的所在, 大脑只用来思考, 存储在脑外.
* GTD是什么
** 人生5楼
   了解GTD之前, 必须了解人生5楼.

   | 楼数 | 功能     | 说明    | 备注    |
   |------+----------+---------+---------|
   | 5楼  | 人生规划 |         |         |
   |------+----------+---------+---------|
   | 4楼  | 3年目标  |         |         |
   |------+----------+---------+---------|
   | 3楼  | 1年目标  |         |         |
   |------+----------+---------+---------|
   | 2楼  | 职责范围 |         |         |
   |------+----------+---------+---------|
   | 1楼  | 项目     |         | GTD管理 |
   |------+----------+---------+---------|
   | 地面 | 行动清单 | 归属1楼 | GTD管理 |
   |------+----------+---------+---------|

   把人生(或部分人生)比喻成一座大厦, 1楼是我们当下要做的事情, 2楼是我们的职责范围, 3楼是我们1年后的样
   子, 4楼是我们3年后的样子, 5楼是我们人生(10年, 20年或一辈子)的规划.

   _我们的人生是高层决定了低层_. 比如, 如果想成为计算机专家(5楼), 那么3年后要先成为工程师(4楼), 1年后
   要先成为程序员(3楼). 为了要成为程序员, 也许我们需要去报班学习(2楼职责为学习),或者成为程序员助理(2楼职
   责为搬砖). 而1楼则是我们当下要确确实实需要处理的事情, 比如看书, 工作, 与同事交流等, 所有一切能对我们有
   提升的事情.

   _大厦是由低到高建造的_. 千里之行, 始于足下. 1楼的行为直接决定了能否达到后面的楼层.

   大厦最难的地方不在于实现5楼的规划, 而在于制定5楼的规划. 不过这也正是人生的魅力所在吧.
** GTD是什么
   GTD全名Getting things done, 它只是一种思想, 所能管理的是大厦的1楼.
   它的核心目的: 事物存储在脑外, 大脑用来思考.

   GTD的工作流程(算法)甚至文件(结构)都是可以自定义的. 适合的才是最好的.

   吐槽: 中文译本《Getting things done》满篇废话.
* GTD怎么实现
  GTD的实现方式非常之多, 有很多软件工具. 最喜欢的还是org-mode(emacs 插件).
* org mode怎么实现GTD
** 思路的设计
   5楼 到 地面视角
   | 楼数 | 功能     | 说明    | 备注    |
   |------+----------+---------+---------|
   | 5楼  | 人生规划 |         |         |
   |------+----------+---------+---------|
   | 4楼  | 3年目标  |         |         |
   |------+----------+---------+---------|
   | 3楼  | 1年目标  |         |         |
   |------+----------+---------+---------|
   | 2楼  | 职责范围 |         |         |
   |------+----------+---------+---------|
   | 1楼  | 项目     |         | GTD管理 |
   |------+----------+---------+---------|
   | 地面 | 行动清单 | 隶属1楼 | GTD管理 |
   |------+----------+---------+---------|
   备注 : GTD管理的其实是 1楼 && 地面的清单
             
** 流程的设计
   #+BEGIN_EXAMPLE artist-mode
     -------------------------+------------------------
                              |
                              |
                              |---------------\ capture
                              |                \       
                              v                        
                         +---------+                   
                         |  inbox  |                   
                         +----+----+                   
                              |   
                              |   
                              |---------------\ refile
                              |                \      
                              v                       
                         +---------+                  
                         |  task   |                  
                         +----+----+                  
                              |   
                              |   
                              |---------------\ archive
                              |                \
                              v   
                         +---------+
                         | archive |
                         +---------+
   #+END_EXAMPLE
** 文件的设计
   | 文件名      | 说明     | 备注                       |
   |-------------+----------+----------------------------|
   | inbox.org   | 收集箱   | 1. 不区分时间, 不区分场景  |
   |             |          | 2. 灵光一闪即可扔进去保存  |
   |             |          | 3. 自动清空                |
   |-------------+----------+----------------------------|
   | task.org    | 任务清单 | 1. priority标签            |
   |             | task     | 2. 四象限约束              |
   |-------------+----------+----------------------------|
   |             | 项目清单 | 1. 凡是steps>1的都属于项目 |
   |             | project  |                            |
   |-------------+----------+----------------------------|
   | archive.org | 参考资料 | 1. 有参考价值的东西        |
   |             |          | 2. 垃圾箱                  |
   |-------------+----------+----------------------------|
   备注:
   1. task 与 project的唯一区别
      task只有one step,  project的steps > 1
   2. 文件都是通过流程来操作的, 不应该手动去干预

** TODO的设计
   | 名称     | 功能         | 备注 |
   |----------+--------------+------|
   | TODO     | 等待自己处理 |      |
   |----------+--------------+------|
   | WAITTING | 等待他人完成 |      |
   |----------+--------------+------|
   | DONE     | 完成         |      |
   |----------+--------------+------|
   | CANCEL   | 取消         |      |
   |----------+--------------+------|
   备注:
   1. 针对的对象是下一步行动清单
   2. project中的下一步行动即是最上层的行动;
      task中的下一步行动是依据四象限法则来确定的.
   3. TODO与WAITTING的含义, 表示该行动正在或即将处理

** TAGS的设计
   四象限使用proirity来区分;
   TAGS为之后快速查找使用

** Agent的设计

   | 命令    | 含义                              | 备注                                 |
   |---------+-----------------------------------+--------------------------------------|
   | C-c a a | 查看当下的操作                    | 最好把当下设置为1月, 能全局一览      |
   |---------+-----------------------------------+--------------------------------------|
   | C-c a n | 当下没有操作, 则可以查看next step |                                      |
   |---------+-----------------------------------+--------------------------------------|
   | C-c a i | 查看inbox中的记录                 | 无需在查看inbox; inbox中的TODO会自动 |
   |         |                                   | refile到task中                       |
   |---------+-----------------------------------+--------------------------------------|
   |         | 如果inbox中也没有                 |                                      |
   |         | 则应该反思, 最近是不是太闲了      |                                      |
   |---------+-----------------------------------+--------------------------------------|

** 使用流程
   #+BEGIN_EXAMPLE
    
         |                   |                    |                    |
         |                   |                    |                    |
         |                   |                    |                    |
     |   v                   v                    v                    v
     | capture              auto                 add                  auto   
     | template+---------+  refile  +---------+  time    +---------+  arvhive +---------+
     +-------->| inbox   |--------->|next step|--------->|  agenda |--------->| archive |
     |  C-c c  +---------+          +---------+ m-a-s,d  +---------+          +---------+
     |                                                                    
     |                                                                
   #+END_EXAMPLE

   1. C-c c   -> inbox
      : info, todo, waiting, project 都会放到inbox
      : 这里使用inbox.org文件存储inbox
   2. 当打开org-agenda(主动调用"r")或者在org-agenda中按'r' 会自动把inbox中的文件refile到指定位置
      这里, todo, waiting, project都会reflie到task.org中      
      除了refile之外, r动作还会根据优先级自动排序
   3. 使用org-agenda-bulk在org-agenda界面操控
      1) 举例, 在C-c a n界面, 即next-step界面, 先使用'm'标记要操作的entry, 然后按'a'可以看到可执行的action
	 比如s 添加开始时间, d添加截至时间等
      2) 举例, 在org-agenda的entry入口出, 使用't', 可以更改entry的状态, 比如把TODO的改为DONE或者CANCEL
   4. org-agenda界面的'r'动作, 不仅可以把inbox中的文件reflie, 也可以把next step(即task.org)中完成的任务archive
      默认的是archive到 archive.org中
   5. 其实还有最后一步, 即把archive中的内容输出到blog中, 或者把无用的删掉
      : blog具体见 hugo的文档
