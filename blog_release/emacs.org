#+TITLE: emacs
#+INFOJS_OPT: toc:t ltoc:t
#+INFOJS_OPT: view:info mouse:underline buttons:nil
#+INFOJS_OPT: path:/script/org-info.js

* emacs使用心得
** why  -- 为什么使用emacs
   下面只是自己的理由
   1. 项目管理 && 日常工作计划               -- org-mode处理(主要使用了org-agent特性)
   2. blog写作                               -- org-mode处理(org本身是非常优秀的文本模式)
   3. bash(shell) 环境                       -- eshell非常优秀
   4. coding 类c语言(c, c++)                 -- 使用emacs作为IDE
   5. coding 其他语言 (go,lisp, ...)         -- 虽然不如专业的开发软件，但emacs胜在方便快捷   
   
** what -- emacs是什么
   emacs更像是一个可扩展的框架, 需要什么功能，扩展一下即可(添加package)
   
** how  -- 如何使用
   这里只是复述自己如何打造自己的emacs
   
   1. 定制外在样式
      - frame的定制, init-frame
      - font的定制,  init-font
      - 字符编码,    init-encode
      - 主题定制,    dracula-theme
   2. package管理
      init-site-lisp && init-elpa
   3. 内在优化
      - buffer, file显示优化, init-helm-mode
      - 智能匹配（[], {}, '', ""...),  init-smartparens-mode
      - 模板文件,     init-yasnippet-mode
      - 文本区域选择, init-expand-region
      - windos选择,   init-window-number
   4. 常用功能
      - 书签     init-bookmark
      - eshell   init-eshell
      - search   init-search
      - tramp    init-tramp
   5. 常用mode
      - org
      - c-comon IDE	
   6. 快捷键管理
      - 鼠标管理, init-disable-mouse
      - 快捷键,   init-local-shortkey, init-global-shortkey
	
	
* emacs基础操作
** frame基础
   建议frame只显示window, mode-line
   - window是我们操作(write, read)的区域
     重要的是window的创建，切换 和 删除
   - mode-line 补充显示buffer的其他信息,以及mode信息，也非常重要
     
** Helm
   [[file:emacs_com/emacs_helm-mode.org][Helm]]改善了用户"查找"时候的体验;
   helm与传统方式 对比:
   - Helm的过滤方式为 正则表达式
   - 传统的过滤方式为 首字母扩展
** org mode
   [[file:emacs_com/emacs_org-mode.org][org-mode]]一直被称为神器, 据传很多人为了它转到了emacs.
   主要功能:
   - org自身强大的文本模式
   - org-agent
  
** eshell
   [[file:emacs_com/emacs_eshell.org][eshell]]是emacs下非常好用shell;
   主要优点:
   - 与elisp的无缝结合
   - 语法特性方面比bash shell更有意思
     #+BEGIN_EXAMPLE
     cd /ssh:clay@192.168.0.97:~
     #+END_EXAMPLE
** 画图
   emacs支持 [[file:emacs_com/emacs_graphviz-mode.org][ASCII图形 和 dot图形等]]
** 快捷键
   [[file:emacs_com/emacs_shortkey.org][emacs按键]]与vim按键 个人理解:
   - emacs功能强大, 却对手指不友好,  更适合在编辑的时候使用
   - vim 功能缺少, 对手指友好, 更适合在查看文档的时候使用
** elisp
   [[file:emacs_com/emacs_elisp.org][elisp]] 是emacs下的lisp
** tramp
   全程 transparent remote access multiple protocol
   tramp是用来编辑远端文件的模块
   支持多种协议 ssh, ftp, smb, adb等, 常用method
   - ssh
   - plink putty的ssh client(与linux的ssh client作用一样)
   - su  这种并不连接到远程主机, 而是允许使用另一个用户身份打开本地文件
     #+BEGIN_EXAMPLE shell
     /su:root:path/
     #+END_EXAMPLE
   - sudo 同上

*** 基本用法
    #+BEGIN_EXAMPLE shell
    /method:user@host#port:path/to/file
    # example 1 
    /ssh:clay@192.1.1.1#22:~
    # example 2 windows下可以使用putty作为ssh的client
    /plink:clay@192.1.1.1:~
    #+END_EXAMPLE
*** 设置默认method
    #+BEGIN_EXAMPLE lisp
    (setq tramp-default-method "plink")

    ; 设置之后的例子. 优点在于可以不需要考虑window和linux环境
    /-:clay@192.1.1.1:~
    #+END_EXAMPLE
*** 多级跳转
    #+BEGIN_EXAMPLE shell
    /ssh:clay@host1|ssh:admin@host2:/path

    # 在本机上,    通过clay用户登录到host1
    # 再在host1上, 通过admin登录到host2    
    #+END_EXAMPLE
*** 以sudo方式打开file
    #+BEGIN_EXAMPLE shell
    # 使用sudo打开远程文件
    /-:clay@192.1.1.1|sudo::/path
    # 使用sudo打开本地文件
    # su::默认的是 su:root@localhost. 配置在tramp-default-method-alist
    /su::local-path
    /su:user@localhost:/local-path
    /sudo:root@localhost:/local-path
    #+END_EXAMPLE
*** 注意事项
    Tramp 打开的远端文件和本地的文件没什么区别，
    会被记录在 backup、autosave、recentf 等中。
    在今后重启 Emacs 时，如果这时无法连接远端机器，Emacs 可能会卡住，
    这是因为 tramp 会对之前打开的文件进行检查

    解决方案:
    让backup等机制绕过tramp即可
*** tramp alist
    tramp使用的时候 需要使用到method user host path的组合，一般较长
    我们更希望使用较短的shortcut去远程打开某个file
    这里推荐的方法是bookmark. 理由:
    1. bookmark emacs内置, 而且非常方便
    2. bookmark 的配置信息 可以方便git管理    


    使用方法:
    #+BEGIN_EXAMPLE shell
    # 1.远程连接
    C-x f /ssh:clay@192.1.1.1:~
    # 2.添加到bookmark
    C-x C-f BOOK-NAME RET
    # 3.查看bookmark
    C-x C-f
    # 4.管理bookmark配置文件
    ~/.emacs.d/bookmarks
    # 5.管理auth信息文件
    ~/.emacs.d/authinfo
    #+END_EXAMPLE
** 快速选择窗口
   mode: switch-window
   快捷键
   1. C-x o -- switch-window 当window数量超过2个, 会使用快捷键选择窗口
   2. 当处于C-x o窗口选择状态时候, 可以通过快捷键改变windows布局
      | key | desc                  |
      |-----+-----------------------|
      | i   | move the border up    |
      |-----+-----------------------|
      | k   | move the border down  |
      |-----+-----------------------|
      | j   | move the border left  |
      |-----+-----------------------|
      | l   | move the border right |
      |-----+-----------------------|
      | b   | balance windows       |
      |-----+-----------------------|
      | SPC | resume auto-resize    |
      |-----+-----------------------|
** 查找
*** 当前buffer查找 isearch，helm-occur
*** 任意目录中查找
    - find-grep
      实际是linux下的find+grep组合, 所以依赖linux下的find和grep命令
      如果是windows系统, 需要下载GnuWin32，并配置emacs认识他
      #+BEGIN_EXAMPLE shell
      # exp1: 在当前目录下的所有文件中(含递归目录) 查找字符串'emacs'
      find . -type f |xargs grep -n emacs
      #+END_EXAMPLE
    - eshell/grep -- 仅在eshell-mode下生效
      使用eshell(emacs内置)的grep
      #+BEGIN_EXAMPLE shell
      # TODO 待补充详细用法
      # 用法 grep 搜索内容 正则式(搜索目录)
      # 在当前目录的文件中 查找字符串'emacs'
      grep emacs *
      #+END_EXAMPLE
*** 工程中查找
    TODO 待补充 整理emacs作为IDE的时候再整理

* emacs打造IDE
** 说明
   本文很大程度借鉴[[http://tuhdo.github.io/c-ide.html][参考文档(强烈建议阅读)]]
** 合格的IDE功能
   - 编辑
     所想即所得的编辑模式
   - 编译
   - 调试
   - 发布

** 编辑器

   | 功能     | mode                         | 说明                                 | 备注   |
   |----------+------------------------------+--------------------------------------+--------|
   | 格式规范 | [[file:emacs_IDE/emacs_cc-mode.org][cc-mode]]                      |                                      |        |
   |----------+------------------------------+--------------------------------------+--------|
   | 自动补全 | [[file:emacs_IDE/emacs_company-mode.org][company-mode]](front-ends)     | 需要back-ends                        |        |
   |          | company-c-headers(back-ends) | 针对头文件,直接安装即可使用,无需配置 |        |
   |----------+------------------------------+--------------------------------------+--------|
   | 智能括号 | [[file:emacs_IDE/emacs_smartparens-mode.org][smartparens-mode]]             |                                      |        |
   |----------+------------------------------+--------------------------------------+--------|
   | 代码折叠 | [[file:emacs_IDE/emacs_hs-mode.org][hs-minor-mode]]                |                                      |        |
   |----------+------------------------------+--------------------------------------+--------|
   | 模板文件 | [[file:emacs_IDE/emacs_yasnippet-mode.org][yasnippet-mode]]               |                                      |        |
   |----------+------------------------------+--------------------------------------+--------|
   | 代码跳转 | [[file:emacs_IDE/emacs_helm-gtags-mode][helm-gtags-mode]](front-ends)  | 需要back-ends                        |        |
   | 查找引用 | global(back-ends)            | apt install global                   |        |
   |----------+------------------------------+--------------------------------------+--------|
   | 拼写检查 | [[file:emacs_IDE/emacs_flyspell-mode.org][flyspell-mode]]                | 单词拼写                             | 已弃用 |
   |----------+------------------------------+--------------------------------------+--------|
   | 语法检查 | flycheck-mode                | 动态,实时检查                        |        |
   |----------+------------------------------+--------------------------------------+--------|
   | 目录列表 | [[file:emacs_IDE/emacs_speedbar-mode.org][speedbar-mode]]                | 显示目录,文件                        |        |
   |----------+------------------------------+--------------------------------------+--------|
   | 语法高亮 | symbol-overlay-mode          |                                      |        |
   |----------+------------------------------+--------------------------------------+--------|

** 编译器
   compilation-mode
   : front-ends, 依赖g++

** 调试器
   gud

* emacs奇淫技巧
** figlet
   把字符艺术化
   emacs中的figlet package是front-end,
   依赖shell环境的back-ends figlet
   
*** 安装
    1. bash中安装back-ends
       #+BEGIN_EXAMPLE
       brew install figlet
       #+END_EXAMPLE
    2. emacs中安装front-ends
       #+BEGIN_EXAMPLE
       package-list-package RET figlet RET
       #+END_EXAMPLE
*** 配置
    1. figlet默认路径
       #+BEGIN_EXAMPLE
       setq figlet-default-directory "/usr/local/bin"
       #+END_EXAMPLE
    2. 默认艺术字体
       #+BEGIN_EXAMPLE
       setq figlet-default-font "banner3-D"
       #+END_EXAMPLE
       
       已安装的字体可以在bash中通过showfigfonts查看   

*** 使用
    #+BEGIN_EXAMPLE
    M-x figlet RET <string> RET
    #+END_EXAMPLE

    #+BEGIN_EXAMPLE
# '########:'##::::'##::::'###:::::'######:::'######::
#  ##.....:: ###::'###:::'## ##:::'##... ##:'##... ##:
#  ##::::::: ####'####::'##:. ##:: ##:::..:: ##:::..::
#  ######::: ## ### ##:'##:::. ##: ##:::::::. ######::
#  ##...:::: ##. #: ##: #########: ##::::::::..... ##:
#  ##::::::: ##:.:: ##: ##.... ##: ##::: ##:'##::: ##:
#  ########: ##:::: ##: ##:::: ##:. ######::. ######::
# ........::..:::::..::..:::::..:::......::::......:::
    #+END_EXAMPLE 
    

    
* emacs键位设置
  原则
  1. 尽量保留默认常用快捷键
  2. 不同mode, 尽量使用相似的快捷键


  思路
  1. 通用快捷键(比如search等与mode无关的) 或者是 所有mode都会使用的(比如yas)
     统一放到C-s中
  2. mode自身的快捷键, 放到C-j中
  3. 因为使用hydra来管理快捷键, 因此可以通过查看hydra body 来查看快捷键设置


  方案
  1. C-s
     查找, 查找全部, 替换, 替换全部
     跳转行号
     查看模板, 添加模板
  2. C-j
     symbol-overlay -- 所有coding都会开启
     helm-gtas      -- cc-mode中开启
     smart-parents  -- 所有coding都会开启
     org-mode


  问题
  1. symbol-overlay, smartparens, helm-gtags会有冲突
     解决方案
     - [X] 开启helm-gtags的时候, hydra-helm-gtags覆盖symbol-overlay
       : 使用remapping commands
     - [ ] smart-parents 使用另外一个快捷键 (这里是妥协的做法, 不是最好的)
     
